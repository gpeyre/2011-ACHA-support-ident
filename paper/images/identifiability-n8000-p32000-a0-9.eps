%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: identifiability-n8000-p32000-a0-9.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Gabriel Peyré
%%CreationDate: 1/2/11
%%BoundingBox: 0 0 475 381
%%HiResBoundingBox: 0 0 474.6943 380.5571
%%CropBox: 0 0 474.6943 380.5571
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 104 8%%BeginData: 9356 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD83FFA87DFFA8A8A8FFA8FFA8FFA8A9A8FFA8FFA8FFA8FFA8A8A8%FFA8FFA8FFA8FFFD05A8FFA8FFFD07A8FF7DFD07A87DFD0BA884FD15A87D%FD23A8FFFFFFA87DFFA8FD1D7DA8FFA87DA87D7EA8FD06FFA8FD06FFA87D%FD30FFA8FFA8FFFFFFA8FFFFFFA8FD07FFA8FFA8FD04FF7DFF5227275227%522752275227522752272727522752275227522752FD0427F827F827F852%F827275252A8AFFD09FF7DFD2FFFA8FD0BFFFD05A8FFFFA8A8A8FD24FFA8%52A8A884FF7D2752525227275252A8FD05FFA8A8FD31FFA8A8A8537EA8A8%A8FFA8FF52A8527DFFFFA8FFA8FD06FFA8FD23FF7D7DFFFFA87D7D7DF827%52FD05FF7DFD2FFFA8FF84A87D7D7DA87DFF7D5252A87D5253FFFFFFA8A8%FD06FFA8A8FD1BFFA9FD09FF7DA87DFFFFFF7D2727FFFFFFA87DFD39FFA8%AFFD07FFA8FFA8FD06FFA8FD1BFFA8A8FD06FFA8A8FFFFA8FFA8FF7DFFA8%52F87EFFFF7DFD2FFFA8FD09FFA8FFFF7D7DA8A8FFFFFFA8A8FD06FFA9FD%1CFFA8FD06FFA87EFFFFFFA87DFF7D7DFFFF52207DFF84FD31FFA87D7E7D%A87D7DA8A8527D7DA82752FFFFA9FFA8FD06FFA8FD23FFA8FD05FFA8FFFF%FFA8FFFF7DF87D7DFD2FFFA8FFA8AFA8A8A8FFA8FF7D7D7DA884A87DFFFF%FFA8A8FD23FFA8FD0EFF7DA8FF7DFFFF7DF87DFD42FFA8FFA8FD06FFA8FD%1BFFA8FD07FFA8A8FD06FF527DFF7DA8FFFF2727FD2FFFA8FFFFFFA8FFFF%FFA8FD04FFFD047DFFFFFFA8A8FD07FFA8FD22FFA8A8FD08FFA8FD04FFA8%2752FD31FF7EA8AFFF7DA8FFA8527D7DA8277DFFFFA8FFA8FD06FFA8FD1B%FFA8FD07FFA8FD07FFA8FF7DA8FF84A8FF2727A8FD2DFFA8FD09FF7D7D7D%A8A8847DFFFFFFA8A8FD06FFA8A8FD1BFFA8FD0EFF7DA8FFA9FFA8A8FF7D%5252FD3AFFA8FFFFFFA8FFA8FFA8FD06FFA8FD1BFFAFFD07FFA8A8FD06FF%A8FFFFFF7DFFA8A97DA8F87EFD2CFFA8FF84A8FFA884FFFD05A8527D7D52%7D7DFFA8A8FD06FFA9FD1CFFA8FD06FFA884FD0AFF7DA8FF7D7DFF7D27FD%2EFFA8A8FFA8A8FFA9A8A8527D7DA87D7D52A8FFFFA8FD06FFA8FD2BFF7D%A8FD05FF7D52FFFF2752FD2BFFA8FD09FF7DFFA9FFA8FFA8A8A8FFA8A8FD%32FFA8A8FFFFFFA884A87DFFFF7D277DFD2BFFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFFFFFA8FFA8A87DA8FF7DA8A8FD1BFFA8FD07FF7DA8FD0CFF7D%FF52FFFFFF52277DFD3DFFA8A8A87DA8FF7D52A8FD23FFA8A8FD06FFA8A8%FD05FFA87D7DFFFFFF5227A8FD3DFFA87D7D7DA8537D7DFD1BFFA8FD07FF%A8FD07FF7DFD05FFA8597DA8A8FFFFA8F87DFD3CFFA8A8FF7DFD05A8FD1C%FFA8FD15FF7D7DFD05FF527DFD3DFFA8FD06FFA8FD23FF7EA8FD06FFA8FD%07FF7DFFA8A8FFFF7D27A8FD3BFFA8A8FD06FFA9FD1CFFA8FD06FFA8A8FD%06FF7DA8FD06FF7DFFFF7DFFFFFF27A8FD3CFFA8FD06FFA8FD1CFFAFFD06%FFA9FD07FFA8FD07FF52FFFFFFA8FFFF5252FD3BFFA8A8FD39FFA884FFFF%A87DFFFFA827A8FD3BFFA8FD06FFA8FD1BFFA8AFFD06FF7DA8FD06FF52A8%FD06FF7D7DA8FF7DFFFFFF277DFD3AFFA8A8FD23FFA8FD06FFAFA8FD06FF%AFFD06FFA8A8A8A9FD05FF7D27FD3BFFA8FD06FFA8FD23FFA8FD0FFF7DFD%04FFA8A8FFA8277DFD39FFA8A8FD06FFA8A8FD1BFFA8FD07FFA8FD06FF7D%A8FD05FFA87DFFA87DFF7DA8FFFF277DFD39FFAFA8FD06FFA8FD1BFFAFFD%07FF7DA8FD06FF7DFD07FF7DFFA87DFFFFA8FFFF7D52FD39FFA8A8FD06FF%A9FD1CFFA8FD07FFA8FD0DFFAF7EFFFF7DA8FD04FFA852FD3AFFA8FD06FF%A8FD1CFFAFFD0EFF7DA8FD06FF7DFFFFFFA8FFA87DFFFF2752FD38FFA8A8%FD2BFFA8FD06FFA8A8FD05FFA87EFD06FF7DFFFF7EF8FD39FFA8FD06FFA8%FD1BFFA8FD07FF7DA8FD0EFF7DFFFFFF7D7EFFFFA8FFA852A8FD37FFA8A8%FD23FFA8FD07FFA8FD06FFA8FD06FFA8A8FD04FFA8FFA8FFFFFF52A8FD38%FFA8A8A8FFFF7DFFA8FD1BFFA8FD0FFF7DAFFD06FF7DFD05FFA8FF52FFFF%7D21FD37FFA8A87D7DA87D53A8FD1DFFA8FD07FFA8FD0DFFA87DFD04FF7E%84FFA8A9FFA8277DFD37FFA852847E7D597DA8A8A8FD19FFA8FD07FF7DA8%FD06FFA8FD07FF7DFD05FFA8FD05FF527EFD36FFA8A8A87EFFA8A8A8FFA8%FD23FFA8FD06FF7DA8FD05FFAF7EFD08FFA8FFFF7D52FD37FFA8FD06FFA8%FD2BFFA8FD07FF7DFD05FF7D7EFF7DA8FFA827A8FD35FFA8A8FD23FFA8FD%07FFA8FD0DFFA87EFD06FFA8FFA8FFFFFF277DFD36FFA8FD06FFA8FD1BFF%A8FD07FF7DA8FD06FF59A8FD06FF7DFD07FFA8FFA8FFFF5252FD35FFA8A8%FD23FFA8FD07FFA8FD06FFA8FD06FFA8A8FD06FF7DA8FFA8FFFF7D53FD36%FFA8FD06FFA8FD1BFFA8FD07FFA8FD0FFF7DFD06FFA884FF7DA8FFFFF87E%FD34FFA8A8FD06FFA8A8FD1BFFA8FD07FFA8FD06FFA8A8FD05FFA87DFD0A%FFA8FFFF7D7DFD35FFA8FD06FFA8FD1BFFA8FD07FF7DA8FD06FF7DA8FD06%FF7DFD07FF7DA8FD04FF7D28FD34FFA8A8FD06FFA8A8FD1BFFA8FD07FFA8%FD0DFFAF7EFD07FFA9A8FF7DA8FFFF27A8FD34FFA8FD06FFA8FD2BFF84FD%07FF7DFD0AFFA8A8FFFF7D52FD33FFA8A8FD23FFA8FD07FFA8FD06FF7DA8%FD05FFA87EFD08FF7DA8FD04FFA852FD34FFA8FD06FFA8FD1BFFA8FD07FF%7DA8FD06FFA8FD07FF7DFD08FFA8A8FFA8FFFFFFF8A8FD32FFA8A8FD39FF%A8A8FD0BFFA87DFFFF7D7DFD33FFA8FD06FFA8FD1BFFA8FD07FFA8FD07FF%59A8FD06FF7DFD09FF7DFFA8A8FFFF7D28FD32FFA8A8FD06FFA8A8FD1BFF%A8FD06FFA9A8FD0DFFA87DFD09FFA8A8FFA8FFFFFF27FD33FFA8A8FD05FF%A8FD1BFFAFFD07FF7DA8FD06FFA8FD07FF7DFD0CFFA8A8FFFF5259FD31FF%A8A8A87DFFFF7DA8FD1DFFA8FD0EFF7DA8FD05FFAF7EFD0AFF7DFFA8A8FF%FF7D53FD32FFA87DA8A8A827A8A8A8AFFD29FFA8FD07FF7DFD0AFF7DA8FF%A8FFFFA827FD31FFA8A87D7DA8A87D7DFFA8FD22FFA8A8FD0DFFA87EFD11%FF277DFD31FFA8A8FFA8FFFFFFA8FD1BFFA8FD07FF7DA8FD06FF7DA8FD06%FF7DFD0BFF7DFFA884FFFF5252FD30FFA8A8FD32FFA8A8FD05FFA8A8FD0B%FF7EA8FF7DFFFFA820FD31FFA8FD06FFA8FD1BFFA8FD07FFA8FD0FFF7DFD%0FFFA8FFA852A8FD2FFFA8A8FD06FFA8A8FD1BFFA8FD06FFA8A8FD06FFA8%A8FD05FFA87DFD0CFF7DFD05FF527EFD30FFA8FD06FFA8FD23FF84A8FD06%FF7DA8FD06FF7DFD0CFF7DA8FF53FFFF7D27FD2FFFA8A8FD06FFA9FD1CFF%A8FD15FFAF7EFD0FFFA8FFFFA827A8FD2FFFA8FD06FFA8FD1CFFAFFD0EFF%A8FD07FF7DFD0DFF7EFD05FF2784FD2EFFA8A8FD06FFAFA8FD22FFA8A8FD%06FF7DA8FD05FFA87EFD0DFF7DA8FFA8FFFF7D52FD2FFFA8FD06FFA8A8FD%1AFFA8FD07FF7DA8FD06FFA8FD07FF7DFD0DFFA8FFFF7DA8FF7D277DFD2D%FFA8A8FD39FFA8A8FD0EFFA8FFA8FFFFFF277DFD2EFFA8FD06FFA8FD1BFF%AFFD07FFA8FD07FF59A8FD06FF7DFD0EFF7DA8FFA8FFFF7D52FD2DFFA8A8%FD06FFA8A8FD1BFFA8FD06FFA87EFD06FFA8A8FD05FFA87DFD0EFFA8FFFF%A8A8FFA852FD2EFFA8FD06FFA8FD1BFFAFFD07FFA8A8FD0EFF7DFD0FFFA8%FF7DA8FFFFF8A8FD2CFFA8A8FD06FFA9FD1CFFA8FD07FFA8FD06FF7DA8FD%05FFAF7EFD0FFF7DA8FD04FF7D7DFD2DFFA8A8FFFFFFA8FFA8FD1CFFAFFD%06FFA8FD07FF7DFD07FF7DFD0FFFA8FD05FF7D27A8FD2BFFA8A87D7DFFA8%7D7DFD24FFA8A8FD0DFFA87EFD10FFA8FFA8A8FFFF27FD2DFFA87DA87DFF%7DA8A8FD1BFFA8FD07FFA8A8FD06FF7DFD07FF7DFD10FF7D7EFF7DFFFF52%52FD2BFFA8A87D7DA87D7DA8FFA8FD1BFFA8FD0EFFA8A8FD05FFA8A8FD10%FFAFFD05FF7D7DFD2CFFA8A8FFA8FFA8FFA8FD1BFFA8FD07FFA8FD0FFF7D%FD11FFA8FFA8A8FFFF27FD2BFFA8A8FD06FFA8A8FD1BFFA8FD06FFA87DFD%06FFA8A8FD05FFA87DFD11FFA87DFF59FFFF5227FD2BFFA8FD06FFA8FD1B%FFAFFD07FFA8A8FD06FF7DA8FD06FF7DFD11FFA8A8FFA8A8FFA827A8FD29%FFA8A8FD06FFA9FD32FFAF7EFD18FF5227FD2AFFA8FD06FFA8FD23FFA8FD%07FFA8FD07FF7DFD13FF53FF7DFFFFFF277EFD28FFA8A8FD23FFA8FD06FF%A87EFD06FF7DA8FD05FFA87EFD15FFA87DFFFFA852FD29FFA8FD06FFA8FD%1BFFA8FD07FFA8A8FD06FFA8FD07FF7DFD14FFA8FFFFA8FFA82752FD27FF%A8A8FD07FFA8FD1BFFA8FD15FFA8A8FD14FF7DA8FD04FFA827A8FD27FFA8%FD06FFA8A8FD1AFFA8FD07FFA8FD07FF7DFD07FF7DFD15FFA8FF52A8FFFF%5252FD26FFA8A8FD06FFA8FD1CFFA8FD06FFA87DFD06FFA8A8FD05FFA87D%FD15FFA9A8FFA8FFFFA8F8AFFD26FFA8FD06FFA8FD1BFFA8FD07FFA8A8FD%0EFF7DFD15FFA87DFFFFA8FFFF5227FD25FFA8A8FD06FFA9FD1CFFA8FD0E%FFA8A8FD05FFAF7EFD1AFF7DFFA8277DFD25FFA8FD06FFA8FD23FFA8A8FD%06FF7DA8FD06FF7DFD17FF7D7DFFFFA8FF7D27A8FD23FFA8A8FD23FFA8FD%06FFA87EFD0DFFA87EFD18FFA8FFFFFFA8FF7D27A8FD23FFA8FD06FFA8FD%1BFFA8FD07FFA8FD07FF7DFD07FF7DFD1AFF7D7DA87DFF52277DFD21FFA8%A8FFFFFFA9A8FD2DFF7EA8FD05FFA8A8FD1DFFA8A8FF7D2752A8FD20FFA8%FFFFFF7D7D7DA8FD1BFFA8FD07FFA8FD07FFA8FD07FF7DFD1DFF7DA87D59%7D52F8272752527D7DFD19A884A8FFFFFF7DA87DFFA8FD1BFFA8FD06FFA8%7DFD0EFF7DFD20FF7DA8FF7D527D52FD1E27FFFFFFA87DFFA8AFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FF%A8A8A8FFA8A8A8FF52A8A8FFA8FFA8A852A8A8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FD05FFA8FFA8A87D7E%FD04A87DA8A8A87DA87DA87DA884A87DA884A87DA87DA8FD07FFA8FFA8A9%A8FFA8A8A8FFA8A9A8FFA8A9A8FFA8FFA8FFA8A8A8FFA8A8A8AFA8A9A8FF%A8A8A8FFA8FFA8FFA8A8A8FFA8A9A8FFA8A8A8FFA8A9A8FFA8A9A8FFA8FF%A8FFA8A9A8FFA8A9A8FFA8AFA8FFA8A9A8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8AFA8FD17FF%A8A8FF7DFF7DFD10FFA87DFF7DFF7DA8FD0FFFFD05A87DFD10FFA87EA87D%FF7DFD11FF7DFF7DFF7DFD22FFA87D52A852A87DFD0FFF7E7D52A852A87D%FD0FFF52FD057DA8FD0FFF597D7DA852A87DFD0FFF7D7D52A852847DFD20%FFA8FD047D527D7DFD0FFFA852527E527D7DA8FD0DFF7D5252A8527D7DA8%FD0EFFA8A8597D7D527D7DFD0EFFA87D7D527D527D7DA8FD20FF7DFD04A8%7EA8FD0FFF84FD06A8FD0FFFA8A87DFFA8A8FD10FF7DFD06A8FD0FFFFD07%A8FDFCFFFD8DFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="Ôªø" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2011-01-02T11:52:11+01:00</xap:CreateDate>
         <xap:ModifyDate>2011-01-02T11:52:11+01:00</xap:ModifyDate>
         <xap:MetadataDate>2011-01-02T11:52:11+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>208</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA0AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9S3C3DW8i2zpHcFSIZJE&#xA;MiK9PhLIrRlgD1AYfMYq85u/zLl0r8uvK/mDVheTT6ukH1uTTbZJpeT27ykqjD01q6jr2rTFUhT8&#xA;/vLzKpEHmr4hUf7jrM7D5KcKqbf85AaEWi4QeaQpJMvLTrOoXiaUovXlTFVw/wCcg/LhCn0fNPxA&#xA;n/jn2Xb/AGOKuH/OQPlw0/c+at15f8c+z/5pxVy/n7ohl3g80+k0YZP9x1pyDAnlX4fCnT3xVs/8&#xA;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&#xA;PkKYqisVdir/AP/Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:1DE75D10F917E0119B80CCD1A2126ED0</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:1EE75D10F917E0119B80CCD1A2126ED0</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>9.900000</stDim:w>
            <stDim:h>20.999999</stDim:h>
            <stDim:unit>Centimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Symbol</stFnt:fontName>
                  <stFnt:fontFamily>Symbol</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>6.1d7e3</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Symbol.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>6.1d18e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helvetica.dfont</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -380.557 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 380.557 li
474.694 380.557 li
474.694 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
25.8315 357.26 mo
25.8315 5.09375 li
472.165 5.09375 li
472.165 357.26 li
25.8315 357.26 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
@
54.5815 5.09375 mo
54.5815 9.51025 li
54.5815 357.26 mo
54.5815 352.76 li
25.8315 357.26 mo
25.8315 5.09375 li
25.8315 357.26 mo
472.165 357.26 li
472.165 357.26 mo
472.165 5.09375 li
25.8315 357.26 mo
25.8315 5.09375 li
25.8315 5.09375 mo
472.165 5.09375 li
25.8315 357.26 mo
472.165 357.26 li
0 0 0 1 cmyk
@
95.665 5.09375 mo
95.665 9.51025 li
95.665 357.26 mo
95.665 352.76 li
@
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdup 50 /two putdef/FontBBox {-951 -481 1446 1122} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/.notdef <1C60D8A8C9B66F631635D26BA635582B3FDE9B3DD75794781396E648A7CA97DB1343CA> |-/zero <1C60D8A8C9B7EF322BB70D1045F9F84CF5A9E636DA48B0B84345CFB17CDCD64AA529BD23C358113A6F12A7F927F67801E7716DEDB8FBB50D28956279879C3943A67386E5304D963AB3E064E7022317006AA79A8777799C5D39502A7CB330EAEEC28837821C5437B109C741C1D7BCD8EEC785ED017624EE945A52A677F5B0E3B0C4781A3901> |-/two <1C60D8A8C9B7EF327699F81B0CD59DC4BD38D48AF11B5B9C1D7787A22BDC09D7BCED9A76C2312055A28AC829584109043EE366AF8632D6D62E9BBD6A4357093750D4015EA59C9F538C44C55AD0DB14FEE0C7267845EB7EFBD514024AA1A03530A8941AD7B5F508335B2FDCA37E6B0627146A6F144DB9DD7DCA6BE86290FB46DD6A2918F4C2C2BDEECA159D78> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/FDOZHD+Helvetica /Helvetica findfont ct_VMDictPut/FDOZHD+Helvetica*1 [48{/.notdef}rp /zero /.notdef /two 205{/.notdef}rp]FDOZHD+Helvetica nfFDOZHD+Helvetica*1 [15 0 0 -15 0 0 ]msf84.9453 372.343 mo(2)sh93.2773 372.343 mo(00)[8.34229 0 ]xsh136.749 5.09375 mo
136.749 9.51025 li
136.749 357.26 mo
136.749 352.76 li
@
177.832 5.09375 mo
177.832 9.51025 li
177.832 357.26 mo
177.832 352.76 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.systemdict beginFDOZHD+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7EF322B8D6E3793F9C339FF2D01F55F75395A69A42725328E1B8E66EAFF6BAC335B6E345906CE7152DDCE6F991DD2E99A50D14EF5FE716864AD89B92005EB56184F6465E294CACBF73EC4E77A27D9ACFF3348FE551D23745FD8C1F5363E223D2FE146B2E36748D97805004E8C37168D3D6622BBF76ADD739801325A4BB7457A49C531154E36C58F381AB30F164CAE6510100AF5FE6405CBE42D3AEC01131A86CADB27645F055DEC901ADBC964660F336098380F7A314362D92502B680C534E053458ABD592A4A4D87F9589307764B161F9884> |-systemdict /gcheck known {setglobal} if end {end} ifendFDOZHD+Helvetica /Encoding getdup 51 /three putpop%ADOEndSubsetFont
/FDOZHD+Helvetica*1 [48{/.notdef}rp /zero /.notdef /two /three 204{/.notdef}rp]FDOZHD+Helvetica nfFDOZHD+Helvetica*1 [15 0 0 -15 0 0 ]msf167.498 373.343 mo(300)[8.34229 8.34229 0 ]xsh218.915 5.09375 mo
218.915 9.51025 li
218.915 357.26 mo
218.915 352.76 li
@
260.081 5.09375 mo
260.081 9.51025 li
260.081 357.26 mo
260.081 352.76 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.systemdict beginFDOZHD+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7EF32298E3DD46F18108137336D1A5C627A90D059BB18158BA2A55FF5DE20CE460964DAF45C08A7D9820A784F4A44F7E1> |-systemdict /gcheck known {setglobal} if end {end} ifendFDOZHD+Helvetica /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/FDOZHD+Helvetica*1 [48{/.notdef}rp /zero /.notdef /two /three /four 203{/.notdef}rp]FDOZHD+Helvetica nfFDOZHD+Helvetica*1 [15 0 0 -15 0 0 ]msf246.356 372.343 mo(4)sh254.7 372.343 mo(00)[8.3418 0 ]xsh301.165 5.09375 mo
301.165 9.51025 li
301.165 357.26 mo
301.165 352.76 li
@
342.249 5.09375 mo
342.249 9.51025 li
342.249 357.26 mo
342.249 352.76 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.systemdict beginFDOZHD+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/five <1C60D8A8C9B7EF3277A9C7C54B35CB479E4C110330EAD203F40A20826414A4CC0E90EF4AAF68DCFEF4ABE6CFF07A7C5FBDADC90A7F87ECB382B602F56451722980F3A3AC74E582BA9C9CEC3027EC489F453112D8FBBD217B656538AC90D034F616E885784C813B1555F6DEF92ECF082193A9672305F8A984DE35F68D1502A8C10EB08C528E24E38813C68D1F86D01BCA9E> |-systemdict /gcheck known {setglobal} if end {end} ifendFDOZHD+Helvetica /Encoding getdup 53 /five putpop%ADOEndSubsetFont
/FDOZHD+Helvetica*1 [48{/.notdef}rp /zero /.notdef /two /three /four /five 202{/.notdef}rp]FDOZHD+Helvetica nfFDOZHD+Helvetica*1 [15 0 0 -15 0 0 ]msf329.919 372.343 mo(500)[8.3418 8.34277 0 ]xsh383.331 5.09375 mo
383.331 9.51025 li
383.331 357.26 mo
383.331 352.76 li
@
424.415 5.09375 mo
424.415 9.51025 li
424.415 357.26 mo
424.415 352.76 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.systemdict beginFDOZHD+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7EF322BACEC3D6ABEF2D493EDC493AA22ED42125C47DF2396DE843240A24151C3116F0DCEE068EC75B404A70B0E3A92C2307D093030C4F08B5CC0A75F4F4D7C70C5CD3B07E718D5DA84710CE02FF093BE8B5ED477F329DF9AC8554D46651B2A99890C549B5152AB0899BB31DC610CEE59FE1F4C3BE037BFF7F7AE7EDC6D596E9E9398287209A7C703150F7EA84F1C65DCD68CCC47A3B7F9EF77F610D53784F89B61AB4160F9D214F618A6C0032B66C3DB575FE49E073B7AB1C1C6CA> |-systemdict /gcheck known {setglobal} if end {end} ifendFDOZHD+Helvetica /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/FDOZHD+Helvetica*1 [48{/.notdef}rp /zero /.notdef /two /three /four /five /six 201{/.notdef}rp]FDOZHD+Helvetica nfFDOZHD+Helvetica*1 [15 0 0 -15 0 0 ]msf412.083 372.343 mo(600)[8.3418 8.34277 0 ]xsh465.581 5.09375 mo
465.581 9.51025 li
465.581 357.26 mo
465.581 352.76 li
@
472.165 350.427 mo
467.665 350.427 li
25.8315 350.427 mo
30.2485 350.427 li
@
FDOZHD+Helvetica*1 [15 0 0 -15 0 0 ]msf12.4199 354.102 mo(0)sh472.165 316.594 mo
467.665 316.594 li
25.8315 316.594 mo
30.2485 316.594 li
@
472.165 282.76 mo
467.665 282.76 li
25.8315 282.76 mo
30.2485 282.76 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.systemdict beginFDOZHD+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B854D0E3687C43D46768E11610> |-systemdict /gcheck known {setglobal} if end {end} ifendFDOZHD+Helvetica /Encoding getdup 46 /period putpop%ADOEndSubsetFont
/FDOZHD+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero /.notdef /two /three /four /five /six 201{/.notdef}rp]FDOZHD+Helvetica nfFDOZHD+Helvetica*1 [15 0 0 -15 0 0 ]msf0 286.43 mo(0.)[8.34229 0 ]xsh12.5039 286.43 mo(2)sh472.165 248.844 mo
467.665 248.844 li
25.8315 248.844 mo
30.2485 248.844 li
@
472.165 215.01 mo
467.665 215.01 li
25.8315 215.01 mo
30.2485 215.01 li
@
FDOZHD+Helvetica*1 [15 0 0 -15 0 0 ]msf0 218.664 mo(0.)[8.34229 0 ]xsh12.5039 218.664 mo(4)sh472.165 181.177 mo
467.665 181.177 li
25.8315 181.177 mo
30.2485 181.177 li
@
472.165 147.26 mo
467.665 147.26 li
25.8315 147.26 mo
30.2485 147.26 li
@
FDOZHD+Helvetica*1 [15 0 0 -15 0 0 ]msf0 150.921 mo(0.)[8.34229 0 ]xsh12.5039 150.921 mo(6)sh472.165 113.427 mo
467.665 113.427 li
25.8315 113.427 mo
30.2485 113.427 li
@
472.165 79.5103 mo
467.665 79.5103 li
25.8315 79.5103 mo
30.2485 79.5103 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.systemdict beginFDOZHD+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7EF322BB1E6B7658B273FB04B6EA2FDD83BE014315CEA310C9045661E4654F5FAA18E921C35D5D5266AB0AB839D962ABE974A291E63893114CACA79253F9F2FA5DBD832A15E9A146C3FAF70E186074467C5FF9BFF3446DA2979E197C33ECF2E6672D0ABB4DD84DADA6F0875D027C1012708E022D3B91B078729D3EB37FF9AB4379F6AE8761C6A64E65D5782F4A15C32B5788322C1277C7EEACA49FCEF1A946497EBAE7710FA41A32E95C02F9037E734AB7501DA6FA4D1255B1B5E2A30AD357C72139096879BB9225AA54D6163D99B65B907C933335C31755E7599F49EDF67E30B707AA1BB3DFB155476D77FA4345C2EDAF4F74461> |-systemdict /gcheck known {setglobal} if end {end} ifendFDOZHD+Helvetica /Encoding getdup 56 /eight putpop%ADOEndSubsetFont
/FDOZHD+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero /.notdef /two /three /four /five /six /.notdef /eight 199{/.notdef}rp]FDOZHD+Helvetica nfFDOZHD+Helvetica*1 [15 0 0 -15 0 0 ]msf2 83.1797 mo(0.)[8.34229 0 ]xsh14.5039 83.1797 mo(8)sh472.165 45.6772 mo
467.665 45.6772 li
25.8315 45.6772 mo
30.2485 45.6772 li
@
472.165 11.8438 mo
467.665 11.8438 li
25.8315 11.8438 mo
30.2485 11.8438 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.systemdict beginFDOZHD+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7EF322B8DEEDAE6F72EF3709E16C7A593AF17F17D72A3907C7468090579C66DE0263BFE> |-systemdict /gcheck known {setglobal} if end {end} ifendFDOZHD+Helvetica /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/FDOZHD+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six /.notdef /eight 199{/.notdef}rp]FDOZHD+Helvetica nfFDOZHD+Helvetica*1 [15 0 0 -15 0 0 ]msf11.4199 15.4995 mo(1)sh472.165 357.26 mo
472.165 5.09375 li
25.8315 357.26 mo
25.8315 5.09375 li
25.8315 5.09375 mo
472.165 5.09375 li
25.8315 357.26 mo
472.165 357.26 li
@
gsave
25.8315 5.09375 mo
25.8315 357.344 li
472.249 357.344 li
472.249 5.09375 li
25.8315 5.09375 li
cp
clp
2 lw
25.8315 11.8438 mo
28.2485 11.8438 li
30.7485 11.8438 li
33.165 11.8438 li
35.665 11.8438 li
38.0815 11.8438 li
40.5815 11.8438 li
43.0815 11.8438 li
45.4985 11.8438 li
47.9985 11.8438 li
50.415 11.8438 li
52.915 11.8438 li
55.415 11.8438 li
57.8315 11.8438 li
60.3315 11.8438 li
62.7485 11.8438 li
65.2485 11.8438 li
67.7485 11.8438 li
70.165 11.8438 li
72.665 11.8438 li
75.082 11.8438 li
77.582 11.8438 li
80.082 11.8438 li
82.4985 11.8438 li
84.9985 11.8438 li
87.415 11.8438 li
89.915 11.8438 li
92.332 11.8438 li
94.832 11.8438 li
97.332 11.8438 li
99.7485 11.8438 li
102.249 11.8438 li
104.665 11.8438 li
107.165 11.8438 li
109.665 11.8438 li
112.082 11.8438 li
114.582 11.8438 li
116.999 11.8438 li
119.499 11.8438 li
121.999 11.8438 li
124.415 11.8438 li
126.915 11.8438 li
129.332 11.8438 li
131.832 11.8438 li
134.332 11.8438 li
136.749 14.5103 li
139.249 14.5103 li
141.665 14.5103 li
144.165 11.8438 li
146.582 12.0103 li
149.082 12.0103 li
151.582 11.9272 li
153.999 11.8438 li
156.499 12.0103 li
158.915 12.5103 li
161.415 13.2603 li
163.915 13.9272 li
166.332 14.5103 li
168.832 14.6772 li
171.249 14.7603 li
173.749 15.1772 li
176.249 16.3438 li
178.665 17.2603 li
181.165 17.7603 li
183.582 17.8438 li
186.082 19.0103 li
188.582 19.7603 li
190.999 20.8438 li
193.499 21.6772 li
195.915 23.5103 li
198.415 25.1772 li
200.832 27.4272 li
203.332 29.3438 li
205.832 31.0103 li
208.249 32.7603 li
210.749 35.4272 li
213.165 39.2603 li
215.665 42.0103 li
218.165 45.9272 li
220.582 48.4272 li
223.082 54.0938 li
225.499 57.4272 li
227.999 62.0103 li
227.999 62.0103 mo
230.499 66.0938 li
232.915 69.2603 li
235.415 71.1772 li
237.832 74.1772 li
240.332 78.5938 li
242.832 87.5103 li
245.249 93.5103 li
247.749 99.6772 li
250.165 107.177 li
252.665 111.26 li
255.081 123.177 li
257.581 126.927 li
260.081 138.677 li
262.499 142.01 li
264.999 152.677 li
267.415 159.677 li
269.915 168.927 li
272.415 177.344 li
274.831 182.927 li
277.331 190.594 li
279.749 199.344 li
282.249 208.177 li
284.749 216.594 li
287.165 223.177 li
289.665 234.26 li
292.081 240.01 li
294.581 248.427 li
297.081 253.427 li
299.499 264.427 li
301.999 272.844 li
304.415 280.677 li
306.915 289.51 li
309.331 292.26 li
311.831 298.76 li
314.331 301.094 li
316.749 307.927 li
319.249 310.844 li
321.665 314.76 li
324.165 319.51 li
326.665 324.594 li
329.081 329.26 li
331.581 331.427 li
333.999 335.01 li
336.499 336.844 li
338.999 339.76 li
341.415 341.51 li
343.915 343.677 li
346.331 344.594 li
348.831 345.927 li
351.331 346.594 li
353.749 347.51 li
356.249 347.844 li
358.665 348.177 li
361.165 348.594 li
363.581 349.01 li
366.081 349.177 li
368.581 349.344 li
370.999 349.51 li
373.499 349.76 li
375.915 350.01 li
378.415 350.26 li
380.915 350.344 li
383.331 350.427 li
385.831 350.427 li
388.249 350.427 li
390.749 350.427 li
393.249 350.427 li
395.665 350.427 li
398.165 350.427 li
400.581 350.427 li
403.081 350.427 li
405.581 350.427 li
407.999 350.427 li
410.499 350.427 li
412.915 350.427 li
415.415 350.427 li
417.831 350.427 li
420.331 350.427 li
422.831 350.427 li
425.249 350.427 li
427.749 350.427 li
430.165 350.427 li
432.665 350.427 li
435.165 350.427 li
437.581 350.427 li
440.081 350.427 li
442.499 350.427 li
444.999 350.427 li
447.499 350.427 li
449.915 350.427 li
452.415 350.427 li
454.831 350.427 li
457.331 350.427 li
459.831 350.427 li
462.249 350.427 li
464.749 350.427 li
467.165 350.427 li
469.665 350.427 li
472.165 350.427 li
@
grestore
28.2949 11.7974 mo
28.2949 13.1772 27.1753 14.2974 25.7949 14.2974 cv
24.415 14.2974 23.2949 13.1772 23.2949 11.7974 cv
23.2949 10.417 24.415 9.29736 25.7949 9.29736 cv
27.1753 9.29736 28.2949 10.417 28.2949 11.7974 cv
f
30.6948 11.7974 mo
30.6948 13.1772 29.5752 14.2974 28.1948 14.2974 cv
26.8149 14.2974 25.6948 13.1772 25.6948 11.7974 cv
25.6948 10.417 26.8149 9.29736 28.1948 9.29736 cv
29.5752 9.29736 30.6948 10.417 30.6948 11.7974 cv
f
33.335 11.7974 mo
33.335 13.1772 32.2148 14.2974 30.835 14.2974 cv
29.4551 14.2974 28.335 13.1772 28.335 11.7974 cv
28.335 10.417 29.4551 9.29736 30.835 9.29736 cv
32.2148 9.29736 33.335 10.417 33.335 11.7974 cv
f
35.7349 11.7974 mo
35.7349 13.1772 34.6152 14.2974 33.2349 14.2974 cv
31.855 14.2974 30.7349 13.1772 30.7349 11.7974 cv
30.7349 10.417 31.855 9.29736 33.2349 9.29736 cv
34.6152 9.29736 35.7349 10.417 35.7349 11.7974 cv
f
38.1353 11.7974 mo
38.1353 13.1772 37.0151 14.2974 35.6353 14.2974 cv
34.2549 14.2974 33.1353 13.1772 33.1353 11.7974 cv
33.1353 10.417 34.2549 9.29736 35.6353 9.29736 cv
37.0151 9.29736 38.1353 10.417 38.1353 11.7974 cv
f
40.5352 11.7974 mo
40.5352 13.1772 39.415 14.2974 38.0352 14.2974 cv
36.6553 14.2974 35.5352 13.1772 35.5352 11.7974 cv
35.5352 10.417 36.6553 9.29736 38.0352 9.29736 cv
39.415 9.29736 40.5352 10.417 40.5352 11.7974 cv
f
43.1753 11.7974 mo
43.1753 13.1772 42.0552 14.2974 40.6753 14.2974 cv
39.2949 14.2974 38.1753 13.1772 38.1753 11.7974 cv
38.1753 10.417 39.2949 9.29736 40.6753 9.29736 cv
42.0552 9.29736 43.1753 10.417 43.1753 11.7974 cv
f
45.5752 11.7974 mo
45.5752 13.1772 44.4551 14.2974 43.0752 14.2974 cv
41.6948 14.2974 40.5752 13.1772 40.5752 11.7974 cv
40.5752 10.417 41.6948 9.29736 43.0752 9.29736 cv
44.4551 9.29736 45.5752 10.417 45.5752 11.7974 cv
f
47.9751 11.7974 mo
47.9751 13.1772 46.855 14.2974 45.4751 14.2974 cv
44.0952 14.2974 42.9751 13.1772 42.9751 11.7974 cv
42.9751 10.417 44.0952 9.29736 45.4751 9.29736 cv
46.855 9.29736 47.9751 10.417 47.9751 11.7974 cv
f
50.4951 11.7974 mo
50.4951 13.1772 49.375 14.2974 47.9951 14.2974 cv
46.6152 14.2974 45.4951 13.1772 45.4951 11.7974 cv
45.4951 10.417 46.6152 9.29736 47.9951 9.29736 cv
49.375 9.29736 50.4951 10.417 50.4951 11.7974 cv
f
52.895 11.7974 mo
52.895 13.1772 51.7749 14.2974 50.395 14.2974 cv
49.0151 14.2974 47.895 13.1772 47.895 11.7974 cv
47.895 10.417 49.0151 9.29736 50.395 9.29736 cv
51.7749 9.29736 52.895 10.417 52.895 11.7974 cv
f
55.415 11.7974 mo
55.415 13.1772 54.2949 14.2974 52.915 14.2974 cv
51.5352 14.2974 50.415 13.1772 50.415 11.7974 cv
50.415 10.417 51.5352 9.29736 52.915 9.29736 cv
54.2949 9.29736 55.415 10.417 55.415 11.7974 cv
f
57.8149 11.7974 mo
57.8149 13.1772 56.6948 14.2974 55.3149 14.2974 cv
53.9351 14.2974 52.8149 13.1772 52.8149 11.7974 cv
52.8149 10.417 53.9351 9.29736 55.3149 9.29736 cv
56.6948 9.29736 57.8149 10.417 57.8149 11.7974 cv
f
60.335 11.7974 mo
60.335 13.1772 59.2148 14.2974 57.835 14.2974 cv
56.4551 14.2974 55.335 13.1772 55.335 11.7974 cv
55.335 10.417 56.4551 9.29736 57.835 9.29736 cv
59.2148 9.29736 60.335 10.417 60.335 11.7974 cv
f
62.855 11.7974 mo
62.855 13.1772 61.7349 14.2974 60.355 14.2974 cv
58.9751 14.2974 57.855 13.1772 57.855 11.7974 cv
57.855 10.417 58.9751 9.29736 60.355 9.29736 cv
61.7349 9.29736 62.855 10.417 62.855 11.7974 cv
f
65.2549 11.7974 mo
65.2549 13.1772 64.1353 14.2974 62.7549 14.2974 cv
61.375 14.2974 60.2549 13.1772 60.2549 11.7974 cv
60.2549 10.417 61.375 9.29736 62.7549 9.29736 cv
64.1353 9.29736 65.2549 10.417 65.2549 11.7974 cv
f
67.6553 11.7974 mo
67.6553 13.1772 66.5352 14.2974 65.1553 14.2974 cv
63.7749 14.2974 62.6553 13.1772 62.6553 11.7974 cv
62.6553 10.417 63.7749 9.29736 65.1553 9.29736 cv
66.5352 9.29736 67.6553 10.417 67.6553 11.7974 cv
f
70.2949 11.7974 mo
70.2949 13.1772 69.1753 14.2974 67.7949 14.2974 cv
66.415 14.2974 65.2949 13.1772 65.2949 11.7974 cv
65.2949 10.417 66.415 9.29736 67.7949 9.29736 cv
69.1753 9.29736 70.2949 10.417 70.2949 11.7974 cv
f
72.6948 11.7974 mo
72.6948 13.1772 71.5752 14.2974 70.1948 14.2974 cv
68.8149 14.2974 67.6948 13.1772 67.6948 11.7974 cv
67.6948 10.417 68.8149 9.29736 70.1948 9.29736 cv
71.5752 9.29736 72.6948 10.417 72.6948 11.7974 cv
f
75.0952 11.7974 mo
75.0952 13.1772 73.9751 14.2974 72.5952 14.2974 cv
71.2148 14.2974 70.0952 13.1772 70.0952 11.7974 cv
70.0952 10.417 71.2148 9.29736 72.5952 9.29736 cv
73.9751 9.29736 75.0952 10.417 75.0952 11.7974 cv
f
77.4951 11.7974 mo
77.4951 13.1772 76.375 14.2974 74.9951 14.2974 cv
73.6152 14.2974 72.4951 13.1772 72.4951 11.7974 cv
72.4951 10.417 73.6152 9.29736 74.9951 9.29736 cv
76.375 9.29736 77.4951 10.417 77.4951 11.7974 cv
f
80.1353 11.7974 mo
80.1353 13.1772 79.0151 14.2974 77.6353 14.2974 cv
76.2549 14.2974 75.1353 13.1772 75.1353 11.7974 cv
75.1353 10.417 76.2549 9.29736 77.6353 9.29736 cv
79.0151 9.29736 80.1353 10.417 80.1353 11.7974 cv
f
82.5352 11.7974 mo
82.5352 13.1772 81.415 14.2974 80.0352 14.2974 cv
78.6553 14.2974 77.5352 13.1772 77.5352 11.7974 cv
77.5352 10.417 78.6553 9.29736 80.0352 9.29736 cv
81.415 9.29736 82.5352 10.417 82.5352 11.7974 cv
f
84.9351 11.7974 mo
84.9351 13.1772 83.8149 14.2974 82.4351 14.2974 cv
81.0552 14.2974 79.9351 13.1772 79.9351 11.7974 cv
79.9351 10.417 81.0552 9.29736 82.4351 9.29736 cv
83.8149 9.29736 84.9351 10.417 84.9351 11.7974 cv
f
87.5752 11.7974 mo
87.5752 13.1772 86.4551 14.2974 85.0752 14.2974 cv
83.6948 14.2974 82.5752 13.1772 82.5752 11.7974 cv
82.5752 10.417 83.6948 9.29736 85.0752 9.29736 cv
86.4551 9.29736 87.5752 10.417 87.5752 11.7974 cv
f
89.9751 11.7974 mo
89.9751 13.1772 88.855 14.2974 87.4751 14.2974 cv
86.0952 14.2974 84.9751 13.1772 84.9751 11.7974 cv
84.9751 10.417 86.0952 9.29736 87.4751 9.29736 cv
88.855 9.29736 89.9751 10.417 89.9751 11.7974 cv
f
92.375 11.7974 mo
92.375 13.1772 91.2549 14.2974 89.875 14.2974 cv
88.4951 14.2974 87.375 13.1772 87.375 11.7974 cv
87.375 10.417 88.4951 9.29736 89.875 9.29736 cv
91.2549 9.29736 92.375 10.417 92.375 11.7974 cv
f
94.7749 11.7974 mo
94.7749 13.1772 93.6553 14.2974 92.2749 14.2974 cv
90.895 14.2974 89.7749 13.1772 89.7749 11.7974 cv
89.7749 10.417 90.895 9.29736 92.2749 9.29736 cv
93.6553 9.29736 94.7749 10.417 94.7749 11.7974 cv
f
97.415 11.7974 mo
97.415 13.1772 96.2949 14.2974 94.915 14.2974 cv
93.5352 14.2974 92.415 13.1772 92.415 11.7974 cv
92.415 10.417 93.5352 9.29736 94.915 9.29736 cv
96.2949 9.29736 97.415 10.417 97.415 11.7974 cv
f
99.8149 11.7974 mo
99.8149 13.1772 98.6948 14.2974 97.3149 14.2974 cv
95.9351 14.2974 94.8149 13.1772 94.8149 11.7974 cv
94.8149 10.417 95.9351 9.29736 97.3149 9.29736 cv
98.6948 9.29736 99.8149 10.417 99.8149 11.7974 cv
f
102.215 11.7974 mo
102.215 13.1772 101.095 14.2974 99.7148 14.2974 cv
98.335 14.2974 97.2148 13.1772 97.2148 11.7974 cv
97.2148 10.417 98.335 9.29736 99.7148 9.29736 cv
101.095 9.29736 102.215 10.417 102.215 11.7974 cv
f
104.735 11.7974 mo
104.735 13.1772 103.615 14.2974 102.235 14.2974 cv
100.855 14.2974 99.7349 13.1772 99.7349 11.7974 cv
99.7349 10.417 100.855 9.29736 102.235 9.29736 cv
103.615 9.29736 104.735 10.417 104.735 11.7974 cv
f
107.255 11.7974 mo
107.255 13.1772 106.135 14.2974 104.755 14.2974 cv
103.375 14.2974 102.255 13.1772 102.255 11.7974 cv
102.255 10.417 103.375 9.29736 104.755 9.29736 cv
106.135 9.29736 107.255 10.417 107.255 11.7974 cv
f
109.655 11.7974 mo
109.655 13.1772 108.535 14.2974 107.155 14.2974 cv
105.775 14.2974 104.655 13.1772 104.655 11.7974 cv
104.655 10.417 105.775 9.29736 107.155 9.29736 cv
108.535 9.29736 109.655 10.417 109.655 11.7974 cv
f
112.175 11.7974 mo
112.175 13.1772 111.055 14.2974 109.675 14.2974 cv
108.295 14.2974 107.175 13.1772 107.175 11.7974 cv
107.175 10.417 108.295 9.29736 109.675 9.29736 cv
111.055 9.29736 112.175 10.417 112.175 11.7974 cv
f
114.575 11.7974 mo
114.575 13.1772 113.455 14.2974 112.075 14.2974 cv
110.695 14.2974 109.575 13.1772 109.575 11.7974 cv
109.575 10.417 110.695 9.29736 112.075 9.29736 cv
113.455 9.29736 114.575 10.417 114.575 11.7974 cv
f
117.095 11.7974 mo
117.095 13.1772 115.975 14.2974 114.595 14.2974 cv
113.215 14.2974 112.095 13.1772 112.095 11.7974 cv
112.095 10.417 113.215 9.29736 114.595 9.29736 cv
115.975 9.29736 117.095 10.417 117.095 11.7974 cv
f
119.495 11.7974 mo
119.495 13.1772 118.375 14.2974 116.995 14.2974 cv
115.615 14.2974 114.495 13.1772 114.495 11.7974 cv
114.495 10.417 115.615 9.29736 116.995 9.29736 cv
118.375 9.29736 119.495 10.417 119.495 11.7974 cv
f
122.015 11.7974 mo
122.015 13.1772 120.895 14.2974 119.515 14.2974 cv
118.135 14.2974 117.015 13.1772 117.015 11.7974 cv
117.015 10.417 118.135 9.29736 119.515 9.29736 cv
120.895 9.29736 122.015 10.417 122.015 11.7974 cv
f
124.535 11.7974 mo
124.535 13.1772 123.415 14.2974 122.035 14.2974 cv
120.655 14.2974 119.535 13.1772 119.535 11.7974 cv
119.535 10.417 120.655 9.29736 122.035 9.29736 cv
123.415 9.29736 124.535 10.417 124.535 11.7974 cv
f
126.935 11.7974 mo
126.935 13.1772 125.815 14.2974 124.435 14.2974 cv
123.055 14.2974 121.935 13.1772 121.935 11.7974 cv
121.935 10.417 123.055 9.29736 124.435 9.29736 cv
125.815 9.29736 126.935 10.417 126.935 11.7974 cv
f
129.335 11.7974 mo
129.335 13.1772 128.215 14.2974 126.835 14.2974 cv
125.455 14.2974 124.335 13.1772 124.335 11.7974 cv
124.335 10.417 125.455 9.29736 126.835 9.29736 cv
128.215 9.29736 129.335 10.417 129.335 11.7974 cv
f
131.735 11.7974 mo
131.735 13.1772 130.615 14.2974 129.235 14.2974 cv
127.855 14.2974 126.735 13.1772 126.735 11.7974 cv
126.735 10.417 127.855 9.29736 129.235 9.29736 cv
130.615 9.29736 131.735 10.417 131.735 11.7974 cv
f
134.375 11.7974 mo
134.375 13.1772 133.255 14.2974 131.875 14.2974 cv
130.495 14.2974 129.375 13.1772 129.375 11.7974 cv
129.375 10.417 130.495 9.29736 131.875 9.29736 cv
133.255 9.29736 134.375 10.417 134.375 11.7974 cv
f
136.775 11.7974 mo
136.775 13.1772 135.655 14.2974 134.275 14.2974 cv
132.895 14.2974 131.775 13.1772 131.775 11.7974 cv
131.775 10.417 132.895 9.29736 134.275 9.29736 cv
135.655 9.29736 136.775 10.417 136.775 11.7974 cv
f
139.175 14.437 mo
139.175 15.8169 138.055 16.937 136.675 16.937 cv
135.295 16.937 134.175 15.8169 134.175 14.437 cv
134.175 13.0571 135.295 11.937 136.675 11.937 cv
138.055 11.937 139.175 13.0571 139.175 14.437 cv
f
141.815 14.437 mo
141.815 15.8169 140.695 16.937 139.315 16.937 cv
137.935 16.937 136.815 15.8169 136.815 14.437 cv
136.815 13.0571 137.935 11.937 139.315 11.937 cv
140.695 11.937 141.815 13.0571 141.815 14.437 cv
f
144.215 14.437 mo
144.215 15.8169 143.095 16.937 141.715 16.937 cv
140.335 16.937 139.215 15.8169 139.215 14.437 cv
139.215 13.0571 140.335 11.937 141.715 11.937 cv
143.095 11.937 144.215 13.0571 144.215 14.437 cv
f
146.615 11.7974 mo
146.615 13.1772 145.495 14.2974 144.115 14.2974 cv
142.735 14.2974 141.615 13.1772 141.615 11.7974 cv
141.615 10.417 142.735 9.29736 144.115 9.29736 cv
145.495 9.29736 146.615 10.417 146.615 11.7974 cv
f
149.015 12.0371 mo
149.015 13.417 147.895 14.5371 146.515 14.5371 cv
145.135 14.5371 144.015 13.417 144.015 12.0371 cv
144.015 10.6572 145.135 9.53711 146.515 9.53711 cv
147.895 9.53711 149.015 10.6572 149.015 12.0371 cv
f
151.655 12.0371 mo
151.655 13.417 150.535 14.5371 149.155 14.5371 cv
147.775 14.5371 146.655 13.417 146.655 12.0371 cv
146.655 10.6572 147.775 9.53711 149.155 9.53711 cv
150.535 9.53711 151.655 10.6572 151.655 12.0371 cv
f
154.055 11.917 mo
154.055 13.2974 152.935 14.417 151.555 14.417 cv
150.175 14.417 149.055 13.2974 149.055 11.917 cv
149.055 10.5371 150.175 9.41699 151.555 9.41699 cv
152.935 9.41699 154.055 10.5371 154.055 11.917 cv
f
156.455 11.7974 mo
156.455 13.1772 155.335 14.2974 153.955 14.2974 cv
152.575 14.2974 151.455 13.1772 151.455 11.7974 cv
151.455 10.417 152.575 9.29736 153.955 9.29736 cv
155.335 9.29736 156.455 10.417 156.455 11.7974 cv
f
159.095 12.0371 mo
159.095 13.417 157.975 14.5371 156.595 14.5371 cv
155.215 14.5371 154.095 13.417 154.095 12.0371 cv
154.095 10.6572 155.215 9.53711 156.595 9.53711 cv
157.975 9.53711 159.095 10.6572 159.095 12.0371 cv
f
161.495 12.5171 mo
161.495 13.897 160.375 15.0171 158.995 15.0171 cv
157.615 15.0171 156.495 13.897 156.495 12.5171 cv
156.495 11.1372 157.615 10.0171 158.995 10.0171 cv
160.375 10.0171 161.495 11.1372 161.495 12.5171 cv
f
163.895 13.2373 mo
163.895 14.6172 162.775 15.7373 161.395 15.7373 cv
160.015 15.7373 158.895 14.6172 158.895 13.2373 cv
158.895 11.8569 160.015 10.7373 161.395 10.7373 cv
162.775 10.7373 163.895 11.8569 163.895 13.2373 cv
f
166.415 13.957 mo
166.415 15.3369 165.295 16.457 163.915 16.457 cv
162.535 16.457 161.415 15.3369 161.415 13.957 cv
161.415 12.5771 162.535 11.457 163.915 11.457 cv
165.295 11.457 166.415 12.5771 166.415 13.957 cv
f
168.815 14.437 mo
168.815 15.8169 167.695 16.937 166.315 16.937 cv
164.935 16.937 163.815 15.8169 163.815 14.437 cv
163.815 13.0571 164.935 11.937 166.315 11.937 cv
167.695 11.937 168.815 13.0571 168.815 14.437 cv
f
171.335 14.6772 mo
171.335 16.0571 170.215 17.1772 168.835 17.1772 cv
167.455 17.1772 166.335 16.0571 166.335 14.6772 cv
166.335 13.2974 167.455 12.1772 168.835 12.1772 cv
170.215 12.1772 171.335 13.2974 171.335 14.6772 cv
f
173.735 14.6772 mo
173.735 16.0571 172.615 17.1772 171.235 17.1772 cv
169.855 17.1772 168.735 16.0571 168.735 14.6772 cv
168.735 13.2974 169.855 12.1772 171.235 12.1772 cv
172.615 12.1772 173.735 13.2974 173.735 14.6772 cv
f
176.255 15.1572 mo
176.255 16.5371 175.135 17.6572 173.755 17.6572 cv
172.375 17.6572 171.255 16.5371 171.255 15.1572 cv
171.255 13.7773 172.375 12.6572 173.755 12.6572 cv
175.135 12.6572 176.255 13.7773 176.255 15.1572 cv
f
178.775 16.3569 mo
178.775 17.7373 177.655 18.8569 176.275 18.8569 cv
174.895 18.8569 173.775 17.7373 173.775 16.3569 cv
173.775 14.9771 174.895 13.8569 176.275 13.8569 cv
177.655 13.8569 178.775 14.9771 178.775 16.3569 cv
f
181.175 17.3169 mo
181.175 18.6973 180.055 19.8169 178.675 19.8169 cv
177.295 19.8169 176.175 18.6973 176.175 17.3169 cv
176.175 15.937 177.295 14.8169 178.675 14.8169 cv
180.055 14.8169 181.175 15.937 181.175 17.3169 cv
f
183.575 17.7974 mo
183.575 19.1772 182.455 20.2974 181.075 20.2974 cv
179.695 20.2974 178.575 19.1772 178.575 17.7974 cv
178.575 16.417 179.695 15.2974 181.075 15.2974 cv
182.455 15.2974 183.575 16.417 183.575 17.7974 cv
f
186.095 17.7974 mo
186.095 19.1772 184.975 20.2974 183.595 20.2974 cv
182.215 20.2974 181.095 19.1772 181.095 17.7974 cv
181.095 16.417 182.215 15.2974 183.595 15.2974 cv
184.975 15.2974 186.095 16.417 186.095 17.7974 cv
f
188.615 18.9971 mo
188.615 20.377 187.495 21.4971 186.115 21.4971 cv
184.735 21.4971 183.615 20.377 183.615 18.9971 cv
183.615 17.6172 184.735 16.4971 186.115 16.4971 cv
187.495 16.4971 188.615 17.6172 188.615 18.9971 cv
f
191.015 19.7173 mo
191.015 21.0972 189.895 22.2173 188.515 22.2173 cv
187.135 22.2173 186.015 21.0972 186.015 19.7173 cv
186.015 18.3369 187.135 17.2173 188.515 17.2173 cv
189.895 17.2173 191.015 18.3369 191.015 19.7173 cv
f
193.415 20.917 mo
193.415 22.2974 192.295 23.417 190.915 23.417 cv
189.535 23.417 188.415 22.2974 188.415 20.917 cv
188.415 19.5371 189.535 18.417 190.915 18.417 cv
192.295 18.417 193.415 19.5371 193.415 20.917 cv
f
196.055 21.6372 mo
196.055 23.0171 194.935 24.1372 193.555 24.1372 cv
192.175 24.1372 191.055 23.0171 191.055 21.6372 cv
191.055 20.2573 192.175 19.1372 193.555 19.1372 cv
194.935 19.1372 196.055 20.2573 196.055 21.6372 cv
f
198.455 23.5571 mo
198.455 24.937 197.335 26.0571 195.955 26.0571 cv
194.575 26.0571 193.455 24.937 193.455 23.5571 cv
193.455 22.1772 194.575 21.0571 195.955 21.0571 cv
197.335 21.0571 198.455 22.1772 198.455 23.5571 cv
f
200.855 25.2373 mo
200.855 26.6172 199.735 27.7373 198.355 27.7373 cv
196.975 27.7373 195.855 26.6172 195.855 25.2373 cv
195.855 23.8569 196.975 22.7373 198.355 22.7373 cv
199.735 22.7373 200.855 23.8569 200.855 25.2373 cv
f
203.255 27.397 mo
203.255 28.7773 202.135 29.897 200.755 29.897 cv
199.375 29.897 198.255 28.7773 198.255 27.397 cv
198.255 26.0171 199.375 24.897 200.755 24.897 cv
202.135 24.897 203.255 26.0171 203.255 27.397 cv
f
205.895 29.3169 mo
205.895 30.6973 204.775 31.8169 203.395 31.8169 cv
202.015 31.8169 200.895 30.6973 200.895 29.3169 cv
200.895 27.937 202.015 26.8169 203.395 26.8169 cv
204.775 26.8169 205.895 27.937 205.895 29.3169 cv
f
208.295 30.9971 mo
208.295 32.377 207.175 33.4971 205.795 33.4971 cv
204.415 33.4971 203.295 32.377 203.295 30.9971 cv
203.295 29.6172 204.415 28.4971 205.795 28.4971 cv
207.175 28.4971 208.295 29.6172 208.295 30.9971 cv
f
210.695 32.6772 mo
210.695 34.0571 209.575 35.1772 208.195 35.1772 cv
206.815 35.1772 205.695 34.0571 205.695 32.6772 cv
205.695 31.2974 206.815 30.1772 208.195 30.1772 cv
209.575 30.1772 210.695 31.2974 210.695 32.6772 cv
f
213.335 35.437 mo
213.335 36.8169 212.215 37.937 210.835 37.937 cv
209.455 37.937 208.335 36.8169 208.335 35.437 cv
208.335 34.0571 209.455 32.937 210.835 32.937 cv
212.215 32.937 213.335 34.0571 213.335 35.437 cv
f
215.735 39.2773 mo
215.735 40.6572 214.615 41.7773 213.235 41.7773 cv
211.855 41.7773 210.735 40.6572 210.735 39.2773 cv
210.735 37.897 211.855 36.7773 213.235 36.7773 cv
214.615 36.7773 215.735 37.897 215.735 39.2773 cv
f
218.135 42.0371 mo
218.135 43.417 217.015 44.5371 215.635 44.5371 cv
214.255 44.5371 213.135 43.417 213.135 42.0371 cv
213.135 40.6572 214.255 39.5371 215.635 39.5371 cv
217.015 39.5371 218.135 40.6572 218.135 42.0371 cv
f
220.655 45.877 mo
220.655 47.2573 219.535 48.377 218.155 48.377 cv
216.775 48.377 215.655 47.2573 215.655 45.877 cv
215.655 44.4971 216.775 43.377 218.155 43.377 cv
219.535 43.377 220.655 44.4971 220.655 45.877 cv
f
223.175 48.5171 mo
223.175 49.897 222.055 51.0171 220.675 51.0171 cv
219.295 51.0171 218.175 49.897 218.175 48.5171 cv
218.175 47.1372 219.295 46.0171 220.675 46.0171 cv
222.055 46.0171 223.175 47.1372 223.175 48.5171 cv
f
225.575 54.0371 mo
225.575 55.417 224.455 56.5371 223.075 56.5371 cv
221.695 56.5371 220.575 55.417 220.575 54.0371 cv
220.575 52.6572 221.695 51.5371 223.075 51.5371 cv
224.455 51.5371 225.575 52.6572 225.575 54.0371 cv
f
227.975 57.397 mo
227.975 58.7773 226.855 59.897 225.475 59.897 cv
224.095 59.897 222.975 58.7773 222.975 57.397 cv
222.975 56.0171 224.095 54.897 225.475 54.897 cv
226.855 54.897 227.975 56.0171 227.975 57.397 cv
f
230.495 61.957 mo
230.495 63.3369 229.375 64.457 227.995 64.457 cv
226.615 64.457 225.495 63.3369 225.495 61.957 cv
225.495 60.5771 226.615 59.457 227.995 59.457 cv
229.375 59.457 230.495 60.5771 230.495 61.957 cv
f
233.015 66.0371 mo
233.015 67.417 231.895 68.5371 230.515 68.5371 cv
229.135 68.5371 228.015 67.417 228.015 66.0371 cv
228.015 64.6572 229.135 63.5371 230.515 63.5371 cv
231.895 63.5371 233.015 64.6572 233.015 66.0371 cv
f
235.415 69.2773 mo
235.415 70.6572 234.295 71.7773 232.915 71.7773 cv
231.535 71.7773 230.415 70.6572 230.415 69.2773 cv
230.415 67.897 231.535 66.7773 232.915 66.7773 cv
234.295 66.7773 235.415 67.897 235.415 69.2773 cv
f
237.815 71.1973 mo
237.815 72.5771 236.695 73.6973 235.315 73.6973 cv
233.935 73.6973 232.815 72.5771 232.815 71.1973 cv
232.815 69.8169 233.935 68.6973 235.315 68.6973 cv
236.695 68.6973 237.815 69.8169 237.815 71.1973 cv
f
240.335 74.1973 mo
240.335 75.5771 239.215 76.6973 237.835 76.6973 cv
236.455 76.6973 235.335 75.5771 235.335 74.1973 cv
235.335 72.8169 236.455 71.6973 237.835 71.6973 cv
239.215 71.6973 240.335 72.8169 240.335 74.1973 cv
f
242.855 78.5171 mo
242.855 79.897 241.735 81.0171 240.355 81.0171 cv
238.975 81.0171 237.855 79.897 237.855 78.5171 cv
237.855 77.1372 238.975 76.0171 240.355 76.0171 cv
241.735 76.0171 242.855 77.1372 242.855 78.5171 cv
f
245.255 87.5171 mo
245.255 88.897 244.135 90.0171 242.755 90.0171 cv
241.375 90.0171 240.255 88.897 240.255 87.5171 cv
240.255 86.1372 241.375 85.0171 242.755 85.0171 cv
244.135 85.0171 245.255 86.1372 245.255 87.5171 cv
f
247.655 93.5171 mo
247.655 94.897 246.535 96.0171 245.155 96.0171 cv
243.775 96.0171 242.655 94.897 242.655 93.5171 cv
242.655 92.1372 243.775 91.0171 245.155 91.0171 cv
246.535 91.0171 247.655 92.1372 247.655 93.5171 cv
f
250.296 99.6372 mo
250.296 101.017 249.175 102.137 247.795 102.137 cv
246.415 102.137 245.295 101.017 245.295 99.6372 cv
245.295 98.2573 246.415 97.1372 247.795 97.1372 cv
249.175 97.1372 250.296 98.2573 250.296 99.6372 cv
f
252.694 107.077 mo
252.694 108.457 251.575 109.577 250.194 109.577 cv
248.815 109.577 247.695 108.457 247.695 107.077 cv
247.695 105.697 248.815 104.577 250.194 104.577 cv
251.575 104.577 252.694 105.697 252.694 107.077 cv
f
255.095 111.277 mo
255.095 112.657 253.976 113.777 252.595 113.777 cv
251.216 113.777 250.095 112.657 250.095 111.277 cv
250.095 109.897 251.216 108.777 252.595 108.777 cv
253.976 108.777 255.095 109.897 255.095 111.277 cv
f
257.495 123.157 mo
257.495 124.537 256.376 125.657 254.995 125.657 cv
253.614 125.657 252.495 124.537 252.495 123.157 cv
252.495 121.777 253.614 120.657 254.995 120.657 cv
256.376 120.657 257.495 121.777 257.495 123.157 cv
f
260.136 126.997 mo
260.136 128.377 259.015 129.497 257.636 129.497 cv
256.255 129.497 255.136 128.377 255.136 126.997 cv
255.136 125.617 256.255 124.497 257.636 124.497 cv
259.015 124.497 260.136 125.617 260.136 126.997 cv
f
262.534 138.757 mo
262.534 140.137 261.415 141.257 260.034 141.257 cv
258.655 141.257 257.534 140.137 257.534 138.757 cv
257.534 137.377 258.655 136.257 260.034 136.257 cv
261.415 136.257 262.534 137.377 262.534 138.757 cv
f
264.935 141.997 mo
264.935 143.377 263.815 144.497 262.435 144.497 cv
261.056 144.497 259.935 143.377 259.935 141.997 cv
259.935 140.617 261.056 139.497 262.435 139.497 cv
263.815 139.497 264.935 140.617 264.935 141.997 cv
f
267.575 152.677 mo
267.575 154.057 266.454 155.177 265.075 155.177 cv
263.694 155.177 262.575 154.057 262.575 152.677 cv
262.575 151.297 263.694 150.177 265.075 150.177 cv
266.454 150.177 267.575 151.297 267.575 152.677 cv
f
269.976 159.637 mo
269.976 161.017 268.854 162.137 267.476 162.137 cv
266.095 162.137 264.976 161.017 264.976 159.637 cv
264.976 158.257 266.095 157.137 267.476 157.137 cv
268.854 157.137 269.976 158.257 269.976 159.637 cv
f
272.376 168.997 mo
272.376 170.377 271.255 171.497 269.876 171.497 cv
268.495 171.497 267.376 170.377 267.376 168.997 cv
267.376 167.617 268.495 166.497 269.876 166.497 cv
271.255 166.497 272.376 167.617 272.376 168.997 cv
f
274.896 177.397 mo
274.896 178.777 273.774 179.897 272.396 179.897 cv
271.015 179.897 269.896 178.777 269.896 177.397 cv
269.896 176.017 271.015 174.897 272.396 174.897 cv
273.774 174.897 274.896 176.017 274.896 177.397 cv
f
277.415 182.917 mo
277.415 184.297 276.296 185.417 274.915 185.417 cv
273.534 185.417 272.415 184.297 272.415 182.917 cv
272.415 181.537 273.534 180.417 274.915 180.417 cv
276.296 180.417 277.415 181.537 277.415 182.917 cv
f
279.815 190.597 mo
279.815 191.977 278.694 193.097 277.315 193.097 cv
275.935 193.097 274.815 191.977 274.815 190.597 cv
274.815 189.217 275.935 188.097 277.315 188.097 cv
278.694 188.097 279.815 189.217 279.815 190.597 cv
f
282.216 199.357 mo
282.216 200.737 281.095 201.857 279.716 201.857 cv
278.335 201.857 277.216 200.737 277.216 199.357 cv
277.216 197.977 278.335 196.857 279.716 196.857 cv
281.095 196.857 282.216 197.977 282.216 199.357 cv
f
284.735 208.117 mo
284.735 209.498 283.614 210.617 282.235 210.617 cv
280.854 210.617 279.735 209.498 279.735 208.117 cv
279.735 206.737 280.854 205.617 282.235 205.617 cv
283.614 205.617 284.735 206.737 284.735 208.117 cv
f
287.255 216.517 mo
287.255 217.897 286.136 219.017 284.755 219.017 cv
283.376 219.017 282.255 217.897 282.255 216.517 cv
282.255 215.137 283.376 214.017 284.755 214.017 cv
286.136 214.017 287.255 215.137 287.255 216.517 cv
f
289.655 223.237 mo
289.655 224.617 288.534 225.737 287.155 225.737 cv
285.774 225.737 284.655 224.617 284.655 223.237 cv
284.655 221.857 285.774 220.737 287.155 220.737 cv
288.534 220.737 289.655 221.857 289.655 223.237 cv
f
292.175 234.277 mo
292.175 235.657 291.056 236.777 289.675 236.777 cv
288.296 236.777 287.175 235.657 287.175 234.277 cv
287.175 232.897 288.296 231.777 289.675 231.777 cv
291.056 231.777 292.175 232.897 292.175 234.277 cv
f
294.575 240.038 mo
294.575 241.417 293.454 242.538 292.075 242.538 cv
290.694 242.538 289.575 241.417 289.575 240.038 cv
289.575 238.657 290.694 237.538 292.075 237.538 cv
293.454 237.538 294.575 238.657 294.575 240.038 cv
f
297.095 248.437 mo
297.095 249.817 295.976 250.937 294.595 250.937 cv
293.216 250.937 292.095 249.817 292.095 248.437 cv
292.095 247.057 293.216 245.937 294.595 245.937 cv
295.976 245.937 297.095 247.057 297.095 248.437 cv
f
299.495 253.477 mo
299.495 254.857 298.376 255.977 296.995 255.977 cv
295.614 255.977 294.495 254.857 294.495 253.477 cv
294.495 252.097 295.614 250.977 296.995 250.977 cv
298.376 250.977 299.495 252.097 299.495 253.477 cv
f
302.015 264.517 mo
302.015 265.897 300.896 267.017 299.515 267.017 cv
298.136 267.017 297.015 265.897 297.015 264.517 cv
297.015 263.137 298.136 262.017 299.515 262.017 cv
300.896 262.017 302.015 263.137 302.015 264.517 cv
f
304.534 272.917 mo
304.534 274.297 303.415 275.417 302.034 275.417 cv
300.655 275.417 299.534 274.297 299.534 272.917 cv
299.534 271.538 300.655 270.417 302.034 270.417 cv
303.415 270.417 304.534 271.538 304.534 272.917 cv
f
306.935 280.597 mo
306.935 281.977 305.815 283.097 304.435 283.097 cv
303.056 283.097 301.935 281.977 301.935 280.597 cv
301.935 279.217 303.056 278.097 304.435 278.097 cv
305.815 278.097 306.935 279.217 306.935 280.597 cv
f
309.335 289.477 mo
309.335 290.857 308.216 291.977 306.835 291.977 cv
305.454 291.977 304.335 290.857 304.335 289.477 cv
304.335 288.097 305.454 286.977 306.835 286.977 cv
308.216 286.977 309.335 288.097 309.335 289.477 cv
f
311.735 292.357 mo
311.735 293.737 310.614 294.857 309.235 294.857 cv
307.854 294.857 306.735 293.737 306.735 292.357 cv
306.735 290.977 307.854 289.857 309.235 289.857 cv
310.614 289.857 311.735 290.977 311.735 292.357 cv
f
314.376 298.837 mo
314.376 300.217 313.255 301.337 311.876 301.337 cv
310.495 301.337 309.376 300.217 309.376 298.837 cv
309.376 297.458 310.495 296.337 311.876 296.337 cv
313.255 296.337 314.376 297.458 314.376 298.837 cv
f
316.774 300.998 mo
316.774 302.377 315.655 303.498 314.274 303.498 cv
312.896 303.498 311.774 302.377 311.774 300.998 cv
311.774 299.617 312.896 298.498 314.274 298.498 cv
315.655 298.498 316.774 299.617 316.774 300.998 cv
f
319.175 307.958 mo
319.175 309.337 318.056 310.458 316.675 310.458 cv
315.296 310.458 314.175 309.337 314.175 307.958 cv
314.175 306.577 315.296 305.458 316.675 305.458 cv
318.056 305.458 319.175 306.577 319.175 307.958 cv
f
321.815 310.837 mo
321.815 312.217 320.694 313.337 319.315 313.337 cv
317.935 313.337 316.815 312.217 316.815 310.837 cv
316.815 309.458 317.935 308.337 319.315 308.337 cv
320.694 308.337 321.815 309.458 321.815 310.837 cv
f
324.216 314.677 mo
324.216 316.057 323.095 317.177 321.716 317.177 cv
320.335 317.177 319.216 316.057 319.216 314.677 cv
319.216 313.297 320.335 312.177 321.716 312.177 cv
323.095 312.177 324.216 313.297 324.216 314.677 cv
f
326.614 319.477 mo
326.614 320.857 325.495 321.977 324.114 321.977 cv
322.735 321.977 321.614 320.857 321.614 319.477 cv
321.614 318.097 322.735 316.977 324.114 316.977 cv
325.495 316.977 326.614 318.097 326.614 319.477 cv
f
329.255 324.517 mo
329.255 325.897 328.136 327.017 326.755 327.017 cv
325.376 327.017 324.255 325.897 324.255 324.517 cv
324.255 323.137 325.376 322.017 326.755 322.017 cv
328.136 322.017 329.255 323.137 329.255 324.517 cv
f
331.655 329.317 mo
331.655 330.697 330.534 331.817 329.155 331.817 cv
327.774 331.817 326.655 330.697 326.655 329.317 cv
326.655 327.937 327.774 326.817 329.155 326.817 cv
330.534 326.817 331.655 327.937 331.655 329.317 cv
f
334.056 331.477 mo
334.056 332.857 332.935 333.977 331.556 333.977 cv
330.175 333.977 329.056 332.857 329.056 331.477 cv
329.056 330.097 330.175 328.977 331.556 328.977 cv
332.935 328.977 334.056 330.097 334.056 331.477 cv
f
336.454 335.077 mo
336.454 336.458 335.335 337.577 333.954 337.577 cv
332.575 337.577 331.454 336.458 331.454 335.077 cv
331.454 333.697 332.575 332.577 333.954 332.577 cv
335.335 332.577 336.454 333.697 336.454 335.077 cv
f
339.095 336.757 mo
339.095 338.137 337.976 339.257 336.595 339.257 cv
335.216 339.257 334.095 338.137 334.095 336.757 cv
334.095 335.377 335.216 334.257 336.595 334.257 cv
337.976 334.257 339.095 335.377 339.095 336.757 cv
f
341.495 339.757 mo
341.495 341.137 340.376 342.257 338.995 342.257 cv
337.614 342.257 336.495 341.137 336.495 339.757 cv
336.495 338.377 337.614 337.257 338.995 337.257 cv
340.376 337.257 341.495 338.377 341.495 339.757 cv
f
343.896 341.557 mo
343.896 342.937 342.774 344.057 341.396 344.057 cv
340.015 344.057 338.896 342.937 338.896 341.557 cv
338.896 340.177 340.015 339.057 341.396 339.057 cv
342.774 339.057 343.896 340.177 343.896 341.557 cv
f
346.415 343.717 mo
346.415 345.097 345.296 346.217 343.915 346.217 cv
342.534 346.217 341.415 345.097 341.415 343.717 cv
341.415 342.337 342.534 341.217 343.915 341.217 cv
345.296 341.217 346.415 342.337 346.415 343.717 cv
f
348.815 344.677 mo
348.815 346.057 347.694 347.177 346.315 347.177 cv
344.935 347.177 343.815 346.057 343.815 344.677 cv
343.815 343.297 344.935 342.177 346.315 342.177 cv
347.694 342.177 348.815 343.297 348.815 344.677 cv
f
351.335 345.877 mo
351.335 347.257 350.216 348.377 348.835 348.377 cv
347.454 348.377 346.335 347.257 346.335 345.877 cv
346.335 344.498 347.454 343.377 348.835 343.377 cv
350.216 343.377 351.335 344.498 351.335 345.877 cv
f
353.735 346.597 mo
353.735 347.977 352.614 349.097 351.235 349.097 cv
349.854 349.097 348.735 347.977 348.735 346.597 cv
348.735 345.217 349.854 344.097 351.235 344.097 cv
352.614 344.097 353.735 345.217 353.735 346.597 cv
f
356.255 347.557 mo
356.255 348.937 355.136 350.057 353.755 350.057 cv
352.376 350.057 351.255 348.937 351.255 347.557 cv
351.255 346.177 352.376 345.057 353.755 345.057 cv
355.136 345.057 356.255 346.177 356.255 347.557 cv
f
358.774 347.797 mo
358.774 349.177 357.655 350.297 356.274 350.297 cv
354.896 350.297 353.774 349.177 353.774 347.797 cv
353.774 346.417 354.896 345.297 356.274 345.297 cv
357.655 345.297 358.774 346.417 358.774 347.797 cv
f
361.175 348.157 mo
361.175 349.538 360.056 350.657 358.675 350.657 cv
357.296 350.657 356.175 349.538 356.175 348.157 cv
356.175 346.777 357.296 345.657 358.675 345.657 cv
360.056 345.657 361.175 346.777 361.175 348.157 cv
f
363.575 348.517 mo
363.575 349.897 362.456 351.017 361.075 351.017 cv
359.694 351.017 358.575 349.897 358.575 348.517 cv
358.575 347.137 359.694 346.017 361.075 346.017 cv
362.456 346.017 363.575 347.137 363.575 348.517 cv
f
366.095 348.998 mo
366.095 350.377 364.976 351.498 363.595 351.498 cv
362.216 351.498 361.095 350.377 361.095 348.998 cv
361.095 347.617 362.216 346.498 363.595 346.498 cv
364.976 346.498 366.095 347.617 366.095 348.998 cv
f
368.614 349.237 mo
368.614 350.617 367.495 351.737 366.114 351.737 cv
364.735 351.737 363.614 350.617 363.614 349.237 cv
363.614 347.857 364.735 346.737 366.114 346.737 cv
367.495 346.737 368.614 347.857 368.614 349.237 cv
f
371.015 349.357 mo
371.015 350.737 369.896 351.857 368.515 351.857 cv
367.136 351.857 366.015 350.737 366.015 349.357 cv
366.015 347.977 367.136 346.857 368.515 346.857 cv
369.896 346.857 371.015 347.977 371.015 349.357 cv
f
373.415 349.477 mo
373.415 350.857 372.296 351.977 370.915 351.977 cv
369.534 351.977 368.415 350.857 368.415 349.477 cv
368.415 348.097 369.534 346.977 370.915 346.977 cv
372.296 346.977 373.415 348.097 373.415 349.477 cv
f
376.056 349.717 mo
376.056 351.097 374.935 352.217 373.556 352.217 cv
372.175 352.217 371.056 351.097 371.056 349.717 cv
371.056 348.337 372.175 347.217 373.556 347.217 cv
374.935 347.217 376.056 348.337 376.056 349.717 cv
f
378.456 349.958 mo
378.456 351.337 377.335 352.458 375.956 352.458 cv
374.575 352.458 373.454 351.337 373.454 349.958 cv
373.454 348.577 374.575 347.458 375.956 347.458 cv
377.335 347.458 378.456 348.577 378.456 349.958 cv
f
380.854 350.197 mo
380.854 351.577 379.735 352.697 378.354 352.697 cv
376.976 352.697 375.854 351.577 375.854 350.197 cv
375.854 348.817 376.976 347.697 378.354 347.697 cv
379.735 347.697 380.854 348.817 380.854 350.197 cv
f
383.495 350.437 mo
383.495 351.817 382.376 352.937 380.995 352.937 cv
379.614 352.937 378.495 351.817 378.495 350.437 cv
378.495 349.057 379.614 347.937 380.995 347.937 cv
382.376 347.937 383.495 349.057 383.495 350.437 cv
f
385.896 350.437 mo
385.896 351.817 384.774 352.937 383.396 352.937 cv
382.015 352.937 380.896 351.817 380.896 350.437 cv
380.896 349.057 382.015 347.937 383.396 347.937 cv
384.774 347.937 385.896 349.057 385.896 350.437 cv
f
388.296 350.437 mo
388.296 351.817 387.175 352.937 385.796 352.937 cv
384.415 352.937 383.296 351.817 383.296 350.437 cv
383.296 349.057 384.415 347.937 385.796 347.937 cv
387.175 347.937 388.296 349.057 388.296 350.437 cv
f
390.694 350.437 mo
390.694 351.817 389.575 352.937 388.194 352.937 cv
386.815 352.937 385.694 351.817 385.694 350.437 cv
385.694 349.057 386.815 347.937 388.194 347.937 cv
389.575 347.937 390.694 349.057 390.694 350.437 cv
f
393.335 350.437 mo
393.335 351.817 392.216 352.937 390.835 352.937 cv
389.456 352.937 388.335 351.817 388.335 350.437 cv
388.335 349.057 389.456 347.937 390.835 347.937 cv
392.216 347.937 393.335 349.057 393.335 350.437 cv
f
395.735 350.437 mo
395.735 351.817 394.614 352.937 393.235 352.937 cv
391.854 352.937 390.735 351.817 390.735 350.437 cv
390.735 349.057 391.854 347.937 393.235 347.937 cv
394.614 347.937 395.735 349.057 395.735 350.437 cv
f
398.136 350.437 mo
398.136 351.817 397.015 352.937 395.636 352.937 cv
394.255 352.937 393.136 351.817 393.136 350.437 cv
393.136 349.057 394.255 347.937 395.636 347.937 cv
397.015 347.937 398.136 349.057 398.136 350.437 cv
f
400.655 350.437 mo
400.655 351.817 399.534 352.937 398.155 352.937 cv
396.774 352.937 395.655 351.817 395.655 350.437 cv
395.655 349.057 396.774 347.937 398.155 347.937 cv
399.534 347.937 400.655 349.057 400.655 350.437 cv
f
403.175 350.437 mo
403.175 351.817 402.056 352.937 400.675 352.937 cv
399.296 352.937 398.175 351.817 398.175 350.437 cv
398.175 349.057 399.296 347.937 400.675 347.937 cv
402.056 347.937 403.175 349.057 403.175 350.437 cv
f
405.575 350.437 mo
405.575 351.817 404.456 352.937 403.075 352.937 cv
401.694 352.937 400.575 351.817 400.575 350.437 cv
400.575 349.057 401.694 347.937 403.075 347.937 cv
404.456 347.937 405.575 349.057 405.575 350.437 cv
f
408.095 350.437 mo
408.095 351.817 406.976 352.937 405.595 352.937 cv
404.216 352.937 403.095 351.817 403.095 350.437 cv
403.095 349.057 404.216 347.937 405.595 347.937 cv
406.976 347.937 408.095 349.057 408.095 350.437 cv
f
410.495 350.437 mo
410.495 351.817 409.376 352.937 407.995 352.937 cv
406.614 352.937 405.495 351.817 405.495 350.437 cv
405.495 349.057 406.614 347.937 407.995 347.937 cv
409.376 347.937 410.495 349.057 410.495 350.437 cv
f
413.015 350.437 mo
413.015 351.817 411.896 352.937 410.515 352.937 cv
409.136 352.937 408.015 351.817 408.015 350.437 cv
408.015 349.057 409.136 347.937 410.515 347.937 cv
411.896 347.937 413.015 349.057 413.015 350.437 cv
f
415.415 350.437 mo
415.415 351.817 414.296 352.937 412.915 352.937 cv
411.534 352.937 410.415 351.817 410.415 350.437 cv
410.415 349.057 411.534 347.937 412.915 347.937 cv
414.296 347.937 415.415 349.057 415.415 350.437 cv
f
417.815 350.437 mo
417.815 351.817 416.694 352.937 415.315 352.937 cv
413.935 352.937 412.815 351.817 412.815 350.437 cv
412.815 349.057 413.935 347.937 415.315 347.937 cv
416.694 347.937 417.815 349.057 417.815 350.437 cv
f
420.335 350.437 mo
420.335 351.817 419.216 352.937 417.835 352.937 cv
416.456 352.937 415.335 351.817 415.335 350.437 cv
415.335 349.057 416.456 347.937 417.835 347.937 cv
419.216 347.937 420.335 349.057 420.335 350.437 cv
f
422.854 350.437 mo
422.854 351.817 421.735 352.937 420.354 352.937 cv
418.976 352.937 417.854 351.817 417.854 350.437 cv
417.854 349.057 418.976 347.937 420.354 347.937 cv
421.735 347.937 422.854 349.057 422.854 350.437 cv
f
425.255 350.437 mo
425.255 351.817 424.136 352.937 422.755 352.937 cv
421.376 352.937 420.255 351.817 420.255 350.437 cv
420.255 349.057 421.376 347.937 422.755 347.937 cv
424.136 347.937 425.255 349.057 425.255 350.437 cv
f
427.655 350.437 mo
427.655 351.817 426.534 352.937 425.155 352.937 cv
423.774 352.937 422.655 351.817 422.655 350.437 cv
422.655 349.057 423.774 347.937 425.155 347.937 cv
426.534 347.937 427.655 349.057 427.655 350.437 cv
f
430.296 350.437 mo
430.296 351.817 429.175 352.937 427.796 352.937 cv
426.415 352.937 425.296 351.817 425.296 350.437 cv
425.296 349.057 426.415 347.937 427.796 347.937 cv
429.175 347.937 430.296 349.057 430.296 350.437 cv
f
432.694 350.437 mo
432.694 351.817 431.575 352.937 430.194 352.937 cv
428.815 352.937 427.694 351.817 427.694 350.437 cv
427.694 349.057 428.815 347.937 430.194 347.937 cv
431.575 347.937 432.694 349.057 432.694 350.437 cv
f
435.095 350.437 mo
435.095 351.817 433.976 352.937 432.595 352.937 cv
431.216 352.937 430.095 351.817 430.095 350.437 cv
430.095 349.057 431.216 347.937 432.595 347.937 cv
433.976 347.937 435.095 349.057 435.095 350.437 cv
f
437.735 350.437 mo
437.735 351.817 436.614 352.937 435.235 352.937 cv
433.854 352.937 432.735 351.817 432.735 350.437 cv
432.735 349.057 433.854 347.937 435.235 347.937 cv
436.614 347.937 437.735 349.057 437.735 350.437 cv
f
440.136 350.437 mo
440.136 351.817 439.015 352.937 437.636 352.937 cv
436.255 352.937 435.136 351.817 435.136 350.437 cv
435.136 349.057 436.255 347.937 437.636 347.937 cv
439.015 347.937 440.136 349.057 440.136 350.437 cv
f
442.534 350.437 mo
442.534 351.817 441.415 352.937 440.034 352.937 cv
438.655 352.937 437.534 351.817 437.534 350.437 cv
437.534 349.057 438.655 347.937 440.034 347.937 cv
441.415 347.937 442.534 349.057 442.534 350.437 cv
f
444.935 350.437 mo
444.935 351.817 443.815 352.937 442.435 352.937 cv
441.056 352.937 439.935 351.817 439.935 350.437 cv
439.935 349.057 441.056 347.937 442.435 347.937 cv
443.815 347.937 444.935 349.057 444.935 350.437 cv
f
447.575 350.437 mo
447.575 351.817 446.456 352.937 445.075 352.937 cv
443.694 352.937 442.575 351.817 442.575 350.437 cv
442.575 349.057 443.694 347.937 445.075 347.937 cv
446.456 347.937 447.575 349.057 447.575 350.437 cv
f
449.976 350.437 mo
449.976 351.817 448.854 352.937 447.476 352.937 cv
446.095 352.937 444.976 351.817 444.976 350.437 cv
444.976 349.057 446.095 347.937 447.476 347.937 cv
448.854 347.937 449.976 349.057 449.976 350.437 cv
f
452.376 350.437 mo
452.376 351.817 451.255 352.937 449.876 352.937 cv
448.495 352.937 447.376 351.817 447.376 350.437 cv
447.376 349.057 448.495 347.937 449.876 347.937 cv
451.255 347.937 452.376 349.057 452.376 350.437 cv
f
454.896 350.437 mo
454.896 351.817 453.774 352.937 452.396 352.937 cv
451.015 352.937 449.896 351.817 449.896 350.437 cv
449.896 349.057 451.015 347.937 452.396 347.937 cv
453.774 347.937 454.896 349.057 454.896 350.437 cv
f
457.415 350.437 mo
457.415 351.817 456.296 352.937 454.915 352.937 cv
453.534 352.937 452.415 351.817 452.415 350.437 cv
452.415 349.057 453.534 347.937 454.915 347.937 cv
456.296 347.937 457.415 349.057 457.415 350.437 cv
f
459.815 350.437 mo
459.815 351.817 458.694 352.937 457.315 352.937 cv
455.935 352.937 454.815 351.817 454.815 350.437 cv
454.815 349.057 455.935 347.937 457.315 347.937 cv
458.694 347.937 459.815 349.057 459.815 350.437 cv
f
462.335 350.437 mo
462.335 351.817 461.216 352.937 459.835 352.937 cv
458.456 352.937 457.335 351.817 457.335 350.437 cv
457.335 349.057 458.456 347.937 459.835 347.937 cv
461.216 347.937 462.335 349.057 462.335 350.437 cv
f
464.735 350.437 mo
464.735 351.817 463.614 352.937 462.235 352.937 cv
460.854 352.937 459.735 351.817 459.735 350.437 cv
459.735 349.057 460.854 347.937 462.235 347.937 cv
463.614 347.937 464.735 349.057 464.735 350.437 cv
f
467.255 350.437 mo
467.255 351.817 466.136 352.937 464.755 352.937 cv
463.376 352.937 462.255 351.817 462.255 350.437 cv
462.255 349.057 463.376 347.937 464.755 347.937 cv
466.136 347.937 467.255 349.057 467.255 350.437 cv
f
469.655 350.437 mo
469.655 351.817 468.534 352.937 467.155 352.937 cv
465.774 352.937 464.655 351.817 464.655 350.437 cv
464.655 349.057 465.774 347.937 467.155 347.937 cv
468.534 347.937 469.655 349.057 469.655 350.437 cv
f
472.175 350.437 mo
472.175 351.817 471.056 352.937 469.675 352.937 cv
468.296 352.937 467.175 351.817 467.175 350.437 cv
467.175 349.057 468.296 347.937 469.675 347.937 cv
471.056 347.937 472.175 349.057 472.175 350.437 cv
f
474.694 350.437 mo
474.694 351.817 473.575 352.937 472.194 352.937 cv
470.815 352.937 469.694 351.817 469.694 350.437 cv
469.694 349.057 470.815 347.937 472.194 347.937 cv
473.575 347.937 474.694 349.057 474.694 350.437 cv
f
gsave
25.8315 5.09375 mo
25.8315 357.344 li
472.249 357.344 li
472.249 5.09375 li
25.8315 5.09375 li
cp
clp
2 lw
25.8315 11.8438 mo
28.2485 11.8438 li
30.7485 11.8438 li
33.165 11.8438 li
35.665 11.8438 li
38.0815 11.8438 li
40.5815 11.8438 li
43.0815 11.8438 li
45.4985 11.8438 li
47.9985 11.8438 li
50.415 11.8438 li
52.915 11.8438 li
55.415 11.8438 li
57.8315 11.8438 li
60.3315 11.8438 li
62.7485 11.8438 li
65.2485 11.8438 li
67.7485 11.8438 li
70.165 11.8438 li
72.665 11.8438 li
75.082 11.8438 li
77.582 11.8438 li
80.082 11.8438 li
82.4985 11.8438 li
84.9985 11.8438 li
87.415 11.8438 li
89.915 11.8438 li
92.332 11.8438 li
94.832 11.8438 li
97.332 11.8438 li
99.7485 11.8438 li
102.249 11.8438 li
104.665 11.8438 li
107.165 11.8438 li
109.665 11.8438 li
112.082 11.8438 li
114.582 11.8438 li
116.999 11.8438 li
119.499 11.8438 li
121.999 11.8438 li
124.415 11.8438 li
126.915 11.8438 li
129.332 11.8438 li
131.832 11.8438 li
134.332 11.8438 li
136.749 11.8438 li
139.249 11.8438 li
141.665 11.8438 li
144.165 12.0103 li
146.582 12.2603 li
149.082 12.2603 li
151.582 12.0938 li
153.999 11.8438 li
156.499 12.3438 li
158.915 13.0938 li
161.415 13.9272 li
163.915 14.5103 li
166.332 15.0103 li
168.832 15.3438 li
171.249 15.5938 li
173.749 16.0103 li
176.249 17.2603 li
178.665 18.2603 li
181.165 18.9272 li
183.582 19.0938 li
186.082 20.3438 li
188.582 21.1772 li
190.999 22.3438 li
193.499 23.5103 li
195.915 25.5938 li
198.415 27.5103 li
200.832 30.0938 li
203.332 32.2603 li
205.832 34.0938 li
208.249 35.9272 li
210.749 38.8438 li
213.165 42.9272 li
215.665 46.0103 li
218.165 50.3438 li
220.582 53.2603 li
223.082 57.0103 li
225.499 60.4272 li
227.999 65.3438 li
227.999 65.3438 mo
230.499 69.5103 li
232.915 73.1772 li
235.415 75.4272 li
237.832 81.0938 li
240.332 85.6772 li
242.832 94.1772 li
245.249 98.6772 li
247.749 105.51 li
250.165 112.51 li
252.665 118.677 li
255.081 127.26 li
257.581 133.01 li
260.081 141.927 li
262.499 148.927 li
264.999 158.177 li
267.415 167.427 li
269.915 173.26 li
272.415 180.76 li
274.831 187.51 li
277.331 196.094 li
279.749 204.094 li
282.249 212.51 li
284.749 222.344 li
287.165 230.344 li
289.665 239.76 li
292.081 246.177 li
294.581 255.344 li
297.081 262.01 li
299.499 271.344 li
301.999 278.677 li
304.415 285.01 li
306.915 292.844 li
309.331 295.177 li
311.831 300.094 li
314.331 302.677 li
316.749 308.51 li
319.249 312.26 li
321.665 316.51 li
324.165 321.427 li
326.665 326.344 li
329.081 330.427 li
331.581 332.76 li
333.999 335.677 li
336.499 337.427 li
338.999 340.427 li
341.415 342.177 li
343.915 344.26 li
346.331 345.01 li
348.831 345.927 li
351.331 346.594 li
353.749 347.344 li
356.249 348.01 li
358.665 348.427 li
361.165 348.76 li
363.581 349.177 li
366.081 349.427 li
368.581 349.677 li
370.999 349.677 li
373.499 349.927 li
375.915 350.094 li
378.415 350.26 li
380.915 350.427 li
383.331 350.427 li
385.831 350.427 li
388.249 350.427 li
390.749 350.427 li
393.249 350.427 li
395.665 350.427 li
398.165 350.427 li
400.581 350.427 li
403.081 350.427 li
405.581 350.427 li
407.999 350.427 li
410.499 350.427 li
412.915 350.427 li
415.415 350.427 li
417.831 350.427 li
420.331 350.427 li
422.831 350.427 li
425.249 350.427 li
427.749 350.427 li
430.165 350.427 li
432.665 350.427 li
435.165 350.427 li
437.581 350.427 li
440.081 350.427 li
442.499 350.427 li
444.999 350.427 li
447.499 350.427 li
449.915 350.427 li
452.415 350.427 li
454.831 350.427 li
457.331 350.427 li
459.831 350.427 li
462.249 350.427 li
464.749 350.427 li
467.165 350.427 li
469.665 350.427 li
472.165 350.427 li
@
[0.5 4 6 4 ] 0 dsh
25.8315 11.8438 mo
28.2485 11.8438 li
30.7485 11.8438 li
33.165 11.8438 li
35.665 11.8438 li
38.0815 11.8438 li
40.5815 11.8438 li
43.0815 11.8438 li
45.4985 11.8438 li
47.9985 11.8438 li
50.415 11.8438 li
52.915 11.8438 li
55.415 11.8438 li
57.8315 11.8438 li
60.3315 11.8438 li
62.7485 11.8438 li
65.2485 11.8438 li
67.7485 11.8438 li
70.165 11.8438 li
72.665 11.8438 li
75.082 11.8438 li
77.582 11.8438 li
80.082 11.8438 li
82.4985 11.8438 li
84.9985 11.8438 li
87.415 11.8438 li
89.915 11.8438 li
92.332 11.8438 li
94.832 11.8438 li
97.332 11.8438 li
99.7485 11.8438 li
102.249 11.8438 li
104.665 11.8438 li
107.165 11.8438 li
109.665 11.8438 li
112.082 11.8438 li
114.582 11.8438 li
116.999 11.8438 li
119.499 11.8438 li
121.999 11.8438 li
124.415 11.8438 li
126.915 11.8438 li
129.332 11.8438 li
131.832 11.8438 li
134.332 12.4272 li
136.749 12.5938 li
139.249 13.0103 li
141.665 12.4272 li
144.165 13.0103 li
146.582 13.1772 li
149.082 14.0938 li
151.582 14.0938 li
153.999 14.3438 li
156.499 14.8438 li
158.915 15.8438 li
161.415 16.7603 li
163.915 17.5103 li
166.332 18.3438 li
168.832 19.0938 li
171.249 19.5938 li
173.749 20.5938 li
176.249 22.4272 li
178.665 24.0103 li
181.165 25.5103 li
183.582 26.5103 li
186.082 28.7603 li
188.582 30.1772 li
190.999 31.9272 li
193.499 34.0938 li
195.915 37.1772 li
198.415 40.3438 li
200.832 43.7603 li
203.332 47.2603 li
205.832 50.2603 li
208.249 52.9272 li
210.749 56.2603 li
213.165 62.0938 li
215.665 67.0938 li
218.165 73.4272 li
220.582 77.2603 li
223.082 82.0103 li
225.499 86.0103 li
227.999 92.2603 li
227.999 92.2603 mo
230.499 97.5103 li
232.915 103.427 li
235.415 106.51 li
237.832 113.76 li
240.332 119.344 li
242.832 129.594 li
245.249 135.51 li
247.749 143.844 li
250.165 152.26 li
252.665 158.927 li
255.081 168.177 li
257.581 174.51 li
260.081 184.344 li
262.499 191.677 li
264.999 200.094 li
267.415 209.927 li
269.915 216.344 li
272.415 225.177 li
274.831 231.594 li
277.331 240.344 li
279.749 247.01 li
282.249 254.76 li
284.749 262.844 li
287.165 270.094 li
289.665 277.094 li
292.081 282.677 li
294.581 289.927 li
297.081 296.01 li
299.499 302.844 li
301.999 308.427 li
304.415 313.01 li
306.915 318.427 li
309.331 319.927 li
311.831 323.677 li
314.331 325.427 li
316.749 329.01 li
319.249 331.177 li
321.665 333.844 li
324.165 336.76 li
326.665 339.344 li
329.081 341.094 li
331.581 342.594 li
333.999 344.177 li
336.499 345.26 li
338.999 346.51 li
341.415 347.51 li
343.915 348.427 li
346.331 348.76 li
348.831 348.927 li
351.331 349.26 li
353.749 349.677 li
356.249 349.927 li
358.665 350.094 li
361.165 350.177 li
363.581 350.344 li
366.081 350.427 li
368.581 350.427 li
370.999 350.344 li
373.499 350.427 li
375.915 350.427 li
378.415 350.427 li
380.915 350.427 li
383.331 350.427 li
385.831 350.427 li
388.249 350.427 li
390.749 350.427 li
393.249 350.427 li
395.665 350.427 li
398.165 350.427 li
400.581 350.427 li
403.081 350.427 li
405.581 350.427 li
407.999 350.427 li
410.499 350.427 li
412.915 350.427 li
415.415 350.427 li
417.831 350.427 li
420.331 350.427 li
422.831 350.427 li
425.249 350.427 li
427.749 350.427 li
430.165 350.427 li
432.665 350.427 li
435.165 350.427 li
437.581 350.427 li
440.081 350.427 li
442.499 350.427 li
444.999 350.427 li
447.499 350.427 li
449.915 350.427 li
452.415 350.427 li
454.831 350.427 li
457.331 350.427 li
459.831 350.427 li
462.249 350.427 li
464.749 350.427 li
467.165 350.427 li
469.665 350.427 li
472.165 350.427 li
@
[6 6 ] 0 dsh
25.8315 11.8438 mo
28.2485 11.8438 li
30.7485 11.8438 li
33.165 11.8438 li
35.665 11.8438 li
38.0815 11.8438 li
40.5815 11.8438 li
43.0815 11.8438 li
45.4985 11.8438 li
47.9985 11.8438 li
50.415 11.8438 li
52.915 11.8438 li
55.415 11.8438 li
57.8315 11.8438 li
60.3315 11.8438 li
62.7485 11.8438 li
65.2485 11.8438 li
67.7485 11.8438 li
70.165 11.8438 li
72.665 11.8438 li
75.082 11.8438 li
77.582 11.8438 li
80.082 11.8438 li
82.4985 11.8438 li
84.9985 11.8438 li
87.415 11.8438 li
89.915 11.8438 li
92.332 11.8438 li
94.832 11.8438 li
97.332 11.8438 li
99.7485 11.8438 li
102.249 11.8438 li
104.665 11.8438 li
107.165 11.8438 li
109.665 11.8438 li
112.082 11.8438 li
114.582 11.8438 li
116.999 11.8438 li
119.499 11.8438 li
121.999 11.8438 li
124.415 12.1772 li
126.915 12.4272 li
129.332 12.5103 li
131.832 12.6772 li
134.332 13.3438 li
136.749 14.4272 li
139.249 14.8438 li
141.665 14.4272 li
144.165 14.5938 li
146.582 14.7603 li
149.082 16.0103 li
151.582 16.6772 li
153.999 17.5938 li
156.499 18.1772 li
158.915 19.0103 li
161.415 20.0938 li
163.915 21.3438 li
166.332 22.6772 li
168.832 24.0103 li
171.249 25.0938 li
173.749 26.4272 li
176.249 28.6772 li
178.665 30.7603 li
181.165 33.2603 li
183.582 34.9272 li
186.082 37.6772 li
188.582 39.5938 li
190.999 42.3438 li
193.499 45.7603 li
195.915 49.9272 li
198.415 53.9272 li
200.832 57.7603 li
203.332 61.9272 li
205.832 65.3438 li
208.249 69.3438 li
210.749 73.5103 li
213.165 81.1772 li
215.665 87.5938 li
218.165 95.5938 li
220.582 100.344 li
223.082 105.927 li
225.499 110.51 li
227.999 117.927 li
227.999 117.927 mo
230.499 123.677 li
232.915 130.844 li
235.415 134.344 li
237.832 143.177 li
240.332 149.344 li
242.832 160.594 li
245.249 167.01 li
247.749 175.76 li
250.165 184.594 li
252.665 191.76 li
255.081 201.76 li
257.581 208.01 li
260.081 217.594 li
262.499 224.01 li
264.999 232.094 li
267.415 241.26 li
269.915 247.594 li
272.415 255.844 li
274.831 261.51 li
277.331 269.594 li
279.749 275.51 li
282.249 282.427 li
284.749 288.76 li
287.165 294.427 li
289.665 300.01 li
292.081 304.76 li
294.581 310.844 li
297.081 315.594 li
299.499 320.677 li
301.999 324.677 li
304.415 327.844 li
306.915 331.677 li
309.331 332.677 li
311.831 335.094 li
314.331 336.177 li
316.749 338.51 li
319.249 340.094 li
321.665 341.927 li
324.165 343.76 li
326.665 344.927 li
329.081 345.76 li
331.581 346.51 li
333.999 347.51 li
336.499 348.094 li
338.999 348.76 li
341.415 349.427 li
343.915 349.844 li
346.331 349.927 li
348.831 349.927 li
351.331 350.177 li
353.749 350.344 li
356.249 350.427 li
358.665 350.427 li
361.165 350.427 li
363.581 350.427 li
366.081 350.427 li
368.581 350.427 li
370.999 350.427 li
373.499 350.427 li
375.915 350.427 li
378.415 350.427 li
380.915 350.427 li
383.331 350.427 li
385.831 350.427 li
388.249 350.427 li
390.749 350.427 li
393.249 350.427 li
395.665 350.427 li
398.165 350.427 li
400.581 350.427 li
403.081 350.427 li
405.581 350.427 li
407.999 350.427 li
410.499 350.427 li
412.915 350.427 li
415.415 350.427 li
417.831 350.427 li
420.331 350.427 li
422.831 350.427 li
425.249 350.427 li
427.749 350.427 li
430.165 350.427 li
432.665 350.427 li
435.165 350.427 li
437.581 350.427 li
440.081 350.427 li
442.499 350.427 li
444.999 350.427 li
447.499 350.427 li
449.915 350.427 li
452.415 350.427 li
454.831 350.427 li
457.331 350.427 li
459.831 350.427 li
462.249 350.427 li
464.749 350.427 li
467.165 350.427 li
469.665 350.427 li
472.165 350.427 li
@
grestore
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.systemdict beginFDOZHD+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B854D00D> |-systemdict /gcheck known {setglobal} if end {end} ifendFDOZHD+Helvetica /Encoding getdup 32 /space putpop%ADOEndSubsetFont
/FDOZHD+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six /.notdef /eight 199{/.notdef}rp]FDOZHD+Helvetica nfFDOZHD+Helvetica*1 [10 0 0 -10 0 0 ]msf24.4126 360.844 mo( )sh470.834 8.58643 mo( )shgsave
25.8315 5.09375 mo
25.8315 357.344 li
472.249 357.344 li
472.249 5.09375 li
25.8315 5.09375 li
cp
clp
2 lw
216.499 357.26 mo
216.499 5.09375 li
@
[6 6 ] 0 dsh
187.999 357.26 mo
187.999 5.09375 li
@
[0.5 4 6 4 ] 0 dsh
159.499 357.26 mo
159.499 5.09375 li
@
[0.5 4 ] 0 dsh
130.915 357.26 mo
130.915 5.09375 li
@
grestore
395.331 68.2603 mo
395.331 10.0938 li
467.249 10.0938 li
467.249 68.2603 li
395.331 68.2603 li
cp
0 0 0 0 cmyk
ef
395.331 68.2603 mo
395.331 10.0938 li
467.249 10.0938 li
467.249 68.2603 li
395.331 68.2603 li
@
467.249 68.2603 mo
467.249 10.0938 li
395.331 68.2603 mo
395.331 10.0938 li
395.331 10.0938 mo
467.249 10.0938 li
395.331 68.2603 mo
467.249 68.2603 li
395.331 68.2603 mo
395.331 10.0938 li
395.331 68.2603 mo
467.249 68.2603 li
467.249 68.2603 mo
467.249 10.0938 li
395.331 68.2603 mo
395.331 10.0938 li
395.331 10.0938 mo
467.249 10.0938 li
395.331 68.2603 mo
467.249 68.2603 li
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Symbol Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Symbol def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 4 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 103 /gamma putdef/FontBBox {-167 -299 1094 827} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/.notdef <1C60D8A8C9B7C3C9ED9313AFF691AF9DEA7EFE9F59246D6675CBE223F5D9796E7E2CD60A70D0> |-/gamma <1C60D8A8C9B7008A5DF677478A06F0F44C8CC4394737FD963F4C6DD75686507A2E460DE9255EC34689EFE34189E2789611FF27E7C8E07E4FD3C32A3EFC84F55D1E4F1BA8A36C8016D86B082EDD8D38D6A1376772E5C5224B03567F48A31FF22B9E2F3E12F4CA7A9D4EEAF9E23E38D22E8FE67B4B3E2067FF48DD4799BF3D67E197E026FAF8035B60277CC6C81F8AC84DAB478C43C1B968887552093D4A6C669D2E700E5F411513014826F7B9A524B905714CC6D39A47A6> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/FDOZHE+Symbol /Symbol findfont ct_VMDictPut/FDOZHE+Symbol*1 [103{/.notdef}rp /gamma 152{/.notdef}rp]FDOZHE+Symbol nfFDOZHE+Symbol*1 [10 0 0 -10 0 0 ]msf431.327 22.2661 mo(g)sh%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.systemdict beginFDOZHD+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/slash <1C60D8A8C9B854D08FD42DCC2A61292225078A8A43> |-/equal <1C60D8A8C9B7F374C62B140C32819FDD54E0FF4342461D2A31EB8866A6299E899689> |-/T <1C60D8A8C9B7D8BE7B6CE17BCB3B2D4B0FB3E6AF9E6DDADD178189522CE1F006> |-systemdict /gcheck known {setglobal} if end {end} ifendFDOZHD+Helvetica /Encoding getdup 47 /slash putdup 61 /equal putdup 84 /T putpop%ADOEndSubsetFont
/FDOZHD+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /slash /zero /one /two /three /four /five /six /.notdef /eight 4{/.notdef}rp /equal 22{/.notdef}rp /T 171{/.notdef}rp]FDOZHD+Helvetica nfFDOZHD+Helvetica*1 [10 0 0 -10 0 0 ]msf435.42 22.2661 mo(=T/)[5.83984 6.1084 0 ]xsh450.155 22.2661 mo(2)shgsave
395.331 10.0938 mo
395.331 68.3438 li
467.331 68.3438 li
467.331 10.0938 li
395.331 10.0938 li
cp
clp
2 lw
400.831 18.5938 mo
428.499 18.5938 li
@
grestore
417.095 18.5171 mo
417.095 19.897 415.976 21.0171 414.595 21.0171 cv
413.216 21.0171 412.095 19.897 412.095 18.5171 cv
412.095 17.1372 413.216 16.0171 414.595 16.0171 cv
415.976 16.0171 417.095 17.1372 417.095 18.5171 cv
f
FDOZHE+Symbol*1 [10 0 0 -10 0 0 ]msf431.327 35.9224 mo(g)shFDOZHD+Helvetica*1 [10 0 0 -10 0 0 ]msf435.42 35.9224 mo(=T/)[5.83984 6.1084 0 ]xsh450.155 35.9224 mo(4)shgsave
395.331 10.0938 mo
395.331 68.3438 li
467.331 68.3438 li
467.331 10.0938 li
395.331 10.0938 li
cp
clp
2 lw
400.831 32.2603 mo
428.499 32.2603 li
@
grestore
FDOZHE+Symbol*1 [10 0 0 -10 0 0 ]msf431.327 49.6724 mo(g)shFDOZHD+Helvetica*1 [10 0 0 -10 0 0 ]msf435.42 49.6724 mo(=T/)[5.83984 6.1084 0 ]xsh450.155 49.6724 mo(8)shgsave
395.331 10.0938 mo
395.331 68.3438 li
467.331 68.3438 li
467.331 10.0938 li
395.331 10.0938 li
cp
clp
2 lw
[0.5 4 6 4 ] 0 dsh
400.831 46.0103 mo
428.499 46.0103 li
@
grestore
FDOZHE+Symbol*1 [10 0 0 -10 0 0 ]msf431.327 63.3442 mo(g)shFDOZHD+Helvetica*1 [10 0 0 -10 0 0 ]msf435.42 63.3442 mo(=T/10)[5.83984 6.1084 2.77832 5.56152 0 ]xshgsave
395.331 10.0938 mo
395.331 68.3438 li
467.331 68.3438 li
467.331 10.0938 li
395.331 10.0938 li
cp
clp
2 lw
[6 6 ] 0 dsh
400.831 59.6772 mo
428.499 59.6772 li
@
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/FDOZHD+Helvetica*1 uf/FDOZHD+Helvetica uf/Helvetica uf/FDOZHE+Symbol*1 uf/FDOZHE+Symbol uf/Symbol ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Gabriel Peyr\616) ()%%Title: (identifiability-n8000-p32000-a0-9.eps)%%CreationDate: 1/2/11 11:52 AM%AI9_DataStream%Gb!Q;pKfVs''O`Eh>pT?bQP3YP!Mo!?qqs^76n_]h=J[8p=n+\TdS.dhsm66m;ET6HTG,-<EE1%Fa:ZSa`?/YNo(5.^GG:3bG<oE%_moM1arO,p0!D`B]GSlCQ'.7t+q>>48VUkTm::n/dQDi0NGo2Y8+2]i^#eur]P,P:]to)&S;\f$H,a,,Fa@CoEFgn3TZ=IVkc_g3%f^#3)T_n;Pn*X^Se[f!\Vk`4DDd#50O2"YKUHrHHqsH#jkm.C;=RN#i*00lnbO=k,Q>ss4"?bgRn;,ficMJaE`o"nuqRAIfp'30+%c9]5ENJcmqOF4n%0*dC=JccnnMu#&tgbn<kTr5bW^5%W_qf'9:FV_m:prQ=c^)DAp8"IU!K9;-JOgplR-R-ZC4Jqs(e46hW5b<d%%&udkV%]<5;5/AC=`tAuUNQ'_11`o<YaWu.##5d>^iS\&\pIV8A*%rZ1%l3+pYX]h$T.M[Ns$h(m;G8@PV:4jW3Zd7CnH:;U=H3Tl%p36l4`ktB3##6ND_$I_#[8Ilb!$2RJO-Mq$Kr`McIBYsb1`7kG'H)+P&W4qm1ct^GAd"LJ_:`oa^7&<eEJJ$X[mURX'Ea`.ad>.-%kM0;DpQ9F832&,DGK>qJTab[$C`:./gHmE72B0@@`u/;nad;:/fU#Yqagk@2"-5U.UAdrHs-#aCq(<G8YqTjE?H!Sg*CLJeQ_]87%%tnr_c4C#7jaa@?mM$R4!TD#-e6-lKmPH"]+C+p#?2/%5=N7"`4:e'@"FR)qn6%<":O+#\niW0-4I#D!.BQS-D=U^O!OWOHpm"B8%X[E5*,ncK#fOd/RFjb!&P=GT1m;s7]V:/6K^;22H.Me^YYm>7`Mbm;&6Cg^P8h6/p!oC(ZTY+/GmuS-FnWNF(*_@fn.@0R]=2635%JiUXpe:K];1F6Td,PZpQ0I-@GH&Ib,n%tUQ'7RcVi"K9<E$?mON8PB3%=d=cbR++kcm8QW/XR?%6Cg^PSr)b8,:>/l:aAkh:\#j#%3>jst3uK"%*C_ZaO][86K3Brnpk4sS$BePU19tBY(M^ea`"aUq+n*;Gi"LRUm)]%@-Q+p,JPW3Jo7KiEM?HQX>Y4tBUPK"+EY3f>%2'_-+:kr3WDB`?,bfT'WjCDMk?dc6i?DN>N&*gss7*L>;_:rMOU_MqrT2:I(2p@>uKY.\b:^:UqnqreddLLgJl%*6OLr1F>LtDnV%-^[5>6)4m.9aTUskQo[0^BAF.EcFOd\WO-a/[9NJ3dI?^PCI-(KJEilP;O_l+Y?[_5D$X*[?Gf>?BJE&aqEYYj$(:s&as</K=>D3%&h.*mAJ*)U3l$P>8Aa+:1rQYVit_G;m?0D2QGNUZ0B%ein;lU#M>W_<MoEbUq(MR,o#B_NM>W_<9.%c!q(MQ18s/#1Ph:1Ppm9<j%')=3V="'0fnmCt6jXlb='DX<W="]]onmCsKOo>rA%Vl<AA6m;qnJD"Zk/YGuZ$<+06?(/HOsTmVs5:*UIm1"4/_5K<Tq>@X9UtsN%KYOHSr!iZXjAW$[V8UC42gW*Sn[NI*mMhFWOsSN`r(WK?AU)?C81F@-hW>]Umu$*Xl;K/_0ekeN8t=q)8/aac0Q6NAra.3VrX\I=%a\#2'5E8,Jp]b;L%`&2.RO0iP`81kW1aImC\/9UK^>X8CO,C:gNXSP<4n9)O+Y18Ik5c(^[Q%cq)s:U8e4^#oEBLT[QGGNP4[nL-%g8@DE8]AV/A/17R1(sMO(L`3Q>Nc*k':NDp/^Bp"$3+C.#YsrjQM<;)2hk:04'LE;8q%sNNVlTA!foI//<_,'8>jFL-f^P55\^gh%dH+qt$N)@%==6EBXTAU^!(R@V!W)lK#^l,&E9%tXN!aH."*o/$$'!%OXPe84a92._oHp^B=V:IH7E]6DDZUf]eOh:1Bd&Ds?(gFJ%/0fC,>,bKjH:_V0.7k@:VB>RI='0,`.En0CSl#%`.n6HB+Gk*I,5+Pp;'1;@K%,!B8^F19J.EMV*^NB;"Tgtl0n?!5`(Jfb^lkcD%klG`4O$'V!Lb@Obe?C55.]a'@T"#$@\Iqu..1X(g@NqEe&-:WSYYg7l9'c`ZAF_JkOL9a!6ng9Po+4+71tIgR,l3\/[Qrt,@P6.S%QiV0a$8d,VS>S'-i#47XJcIMCMd^]EmgJE/7/W\694W:24b1aUZ#3-Ap*HS,7LhCPh?7/B\W4%`M/<gl9'D)N#L(fZ,,^Z0_&Ts1%F&:)71&]P\&>5='p,^u(4>$.K]_4%NU5WNthLO0W`,dghX<_Zae#1R%MQ87N6aY#a,s4hWON-<]nl-&.$#_1:3$p&&;B]h:gF4Vm%J6N&E:#M/3PnY^N!?$e\7FF`J5(IXe6?juZ9932].oaHlah1:'M390R'>g+kh!uAT$#N;lKUjM7iWl&D>biP932AHcSHhG4-I\@/%@p/nM%BdhbQ>'$WGa+_#C/(&DM!Id;=@pL4R?n6pX;Vo?S&PPM>juW"gf\4f9lWFdYK?*;emaY1[H*[irDPJ2E=0cbE%!7+Y?[3/%7B?l8ld1)`mMU1_Gm&fKq'=KLY?_Uf=COl4,d`[HG@2#c1j4aY+_.Lao+P:-Ia54h=@>=mkA`!uS[BTG1.[13QT%?P/PY2-P0=L)%DFcYt3=TjXXb;ceYGq>]`+9M@H&3#oAX]MITI*TF>eh+p\!M(dWEq<^T^A5MP:-YAPV:.j@XeO,.>X4bR7QWg5XVf:A6il//9-ZV%RV(Wh"?mQEKImLU('4nh(l]fM.(C,EP/'M^SQqn;O:\Ws';PFYjs:?AJemsbUkrLn2]`?$]AspD/b9X<+qXIFm#282R`J(AZZJAW%cV@U,R#8?gLpSc$@p#mrBaq8(ZsW.$MM1.J-V;_G(\h+V(_T*-MDZ/>,0Nda``:)4-HWm8UPP^K_&Apsm9o/L`dQ!XX70#OYiOVF%dA%?N!hLbB=OZ%MXWBR\fjr2P0(F!TL,FKK;'$7BPVeNdah6^Q/%A_bLKij(R1W]A'Z6%fPL]_,n:,+>>Zrup8`CI2CoB#QaJ+D9%b0LF>7,fCA$[iDqK2k:\!L4A;q%.g@i$"&4)]T<&&P)?Fjh)kDTG]HC337B0U(Yud7s$Wk\kFNq<0E"Z3@f7S7R`l\TW(KR<o@^i%>Rt9g+OZHg7"W&pi0oT6P+3`a!KoXMQ8?]&$+j.[D8]j'JU9pK%jgD\CTih?AM,,t>r8`^Ne4pgjsrLfTH96J$<^S!gF:7u4!f`K%p%C*q#L,G5W@7OqMHc<fk>7?90dEc]pJVf%Pf:'6^*`>F^!Wf9hm+r5MQe$rq\ie%U10,SjA9QUd#'8+L#.dp>\/p@_,A,eZJLK3%8^_+L8@#t>"4:@@d(]`gSVhV^p-s$t'?;<N^W9`UV.%?C$)<(&6tqHr&7V3*7jNP`pd/,oEk%(E\5n`fX:b^.$MD.7GJOnMX"uuB%D,-'`,oPi;CgpOe:Q23n%-87=>`qRZJe\_PQK$G?8p9:D16%-XKm>>k*]>>;RTK3_,AE&$_@qr!l',SdOmF'p9T6C3Z=:HZLLDJL%:SK%uXjG-MV\i-%k*0E-\>:GsGpJ[@b/u[UUM35MQn5G_/"3BVTqr`0dV2,;5k[8lTcU\cc<@73n/71#n6J(V^n5/hf9,6]&4.mJ%VFO'j]u!sn'r.LK9prj6M8ui`Ca/@XQ/!opN-$Tt,rR4!RkP2+ZY8E#O\3Rj8&,e'eP#_P0t-;I;I6_dLo28<2Cr!LW=QXsE$`Vl%,iag$=37uUY/c@r>a0%.=\iZ]$G7,I=3scp.t[G#4Q?uhBPCp!'O.G0J.rt)hNmmPNfeNgBF1o)/M#*c?k*giPKun/s(ckSk*[XZ%asH-87]rlkXo)P0Do::lh*Bos=;PLWZ><2W7/g!$P^`jqPdK.l>3oH3I9QGJ4WYeiMrjTD2)Wi`/PCMm9(E_q0j$ffl@1#LYqfC^%&?D80B+)IBaotb\(0IS+=l<!%DBln@8s@2F9MWT\IBuU3_^gJP&@=(a"Z@984f7*fM/VBP$A@%%Ba_an=^o3(;\j6FU?kLtkesC/%Da>uurCLjjak0%.&R-EC6uWR^=BQUq5$^^8^I0)<PVPYm"U2plOj>Os,%!qKVcM[F\.;n<jBHWp%8LJUd=8,QRuA]_UeLWF9.gI-%jj`t]imZ;Ij^^*5&'+.6JNKEY^<\ii%DW].RdUal1K6,jk%CVP>3l^p_pPCr/U)Na`?9K<(lnHFka>Pt'l?T^F@_Z,DCsT,%;3B9%pY0BNGI/UH+n'Voj#s[;!IiK4*KX>-e>i]9eKJXU8EpV_3^]ml(cUo@:.X1IWB6g=:8GH716a)a\g1:BE`H1_.Fmg0hVSREBHI\&%0SoE6]VG);?oEU>bQg<#Sr7cYUX<H]ST\TFJa#Z=^%'nrpU_XQV&=G:7'6-W]ufo=g$nrM&REUArP<\jp(\l`OLg@/-]@u^/Xe=_%cfV"Jr50gDRZ<^*n)8L?<tbQ41DiWsQg2UD9g/%8ACc5LTVdJ(!IXq8b^7MFr"(B#cuYoTTB0GjPO)*E23&1GmYs9bpaa4a@BVIR%01^#pN@&=Y[DR5rU88oY:DT_AgHtm.+>F^mL/XK8I+mfoU3X$]GlcTO5NV)3E+I`o6])AfnK3_2#fO5MnHWbAs,s"<L]-1=6U21h%BG/PXUi11X%U%3ME]1`Y`KVR+)ume"\Y="01gpDJ:s[N<l=\NM"Mnk*doj.9+%QLP5>]nLa(.2#.,p-H.24@4ht$t,b0o4j">k8l%]M>5;?)gjOQ-Mps1TETXhIiWRS()-#c*U&>+'*,?+%E6=a[1B!H8EA2fmm&foIrQBOsUn1MLI+sn"&/&Hdl1N&04NcK<JslKALZT%Q*E8]r:oAg^AK$_go%*4GfX>P<?Cl]i6\!6^IZYgP[!ZF<.5gP.hEfSX*`8+idG8lm]5#]E:qP!@(TM"Zn2&+U]/?DW:8S3:Ch8n%'ps]E:%D-aoYJkZ1I=;=dGaj0&`)FgMNe.g\,t[.K+=Oar,Ani(+:)@Pf9j_l4;e/U1ioNfP`c2SPAt(*o]+GeD^Nh-Ybi1Nh1Y0%hE,TkRuTuNHNEDRZfu#-1IWtp/W:mEMO"IA7E<ZX0nCS].K=`KINQ)1(^$$nLe*2U^Z`p):;HRT^t:t(%mIG)dj^NW?<X*M.]Uc@%b@uD&2KAQ`rCM4kDKQ^:m_T5AnD*IJSroX_ncjEo*<%f<cQ\q=e8O'teI;ARhq_r$:W.k4bJFAWgZ<Ic(g&_=f`S_BRCb.Wc9L)c%PK??6T<_!+VXPEeL&1fiIC/JOj0LIk['h?UK"@lXD"1la$`\(!""O4eDS=[ggDQ:XL-<3[FNUGO8=>+U.\k:*+MWteMLTK9-)U%f%r*.01l:D@C:N&)"r!1=rhq"op#&f^Y2[),;Zon>'0Ub\75tXr"hWMW;bbeuH__NBqfgca.kue5NjEh6M0CI#Ec?+Sl]D/>_R[5qZ%GgmUTAo@NOC(f/0_I(7-PUqYRP8]D_gS\1]3,HkRe"d*J3u7i=DXWH@`^kQq5MR,5V""S1'g:r3&)8=0oQ'_d(pI,b\BiP%mk->J%K5ofJK74f80;%IU^YCR<M>Q7gEVIl0gC%9T(<I8$*r@QK@eOa(Y>1]$-hL(1ZG4mBpIkJU^XR2gQhl^A;SS&ql8SN3rMG%Cht6C0%bPi-h@Xj5AZ+n5\fO*W>ln@lZp6YOhqb-jEr?Zp3rXutTIu.NP^Vm=c?fG/B0C^R\QhV<i9Dj\E-%<i3'#3FTM-k8;`36[Xi`H%2%nLOU*p_Eg%r/1M#I`;="^Z'a"?h(nKY>W,&^?OOKhXp7JDu+Zk2uPh6S,OGN:&b^^VLOA=e%[,>UjknW8H6`@e,t$N=cO7n(*/V=%^<j=sQ[!pU_tIJ?K>CqgI!OM6mI6F]r)RGe==aZ$&?W+YkRo<]dbL\0>,p+o[0feZ@TuTf$C[nR)Jkj&i!QNT8[&UP+pU<Ybl87r%UP;_Y%2p&&.UHp[S<@3Qibu2mn8!in.6=ebaR@lIk38[+cn4$squ6R9NDX]*ZWPG+h;r*"pELqL<V*P"k<IG6#25tiofe,*rbO88%FZ=TPNZ]R3_T1XX350uBhsPagnlKH^had<Y\H%s'A_"OVUSV'/T$Il2N=g#iC;NO(MI6CYcp9d0?ir*X8agHA[f[MQB'=I%eK*X"%r)anZ6ca7-=IeAB=O3&2]qOOp',%Aq,](_Tf]eD#FqEPO<WABk4nG"W;MV9eN6s>mhK$>tI/bfHqf@"LR<Lo4JNXO+QsFh3j)fjl%nm=5<ru\1]rq<PqinaBra^@:NpAWZh0qVo!nTY[tiaU7P):.tc!'\/@Q<:6a]1b2MN("BD(iM:8Igu:5%m/5Q.fSk;Umm>qB(_4U%)?'0]Z]QkV[[>=s[Q)HKcNYsn@59R*7X).',!g;>[NKeng6n6"Sc=</+7m1ha`>rOi![&EIK)gLe8GlVHa)`+OZ9`937;T&A%ODH%+7*AO<EXmh?jLbeOo(pZ1\YuLQk*eY%G[/^#.#`q5m1_.$so;P(D':#?4?hABY$,@:>NSi#a9bM+\l]+[b:A%0q3QI=:\KN'=b#V%cT2V^'`Mmp>>/YsDJ.H:pBK=]=LSPBpM`<IX3f[.E5]d,osfW6,BBc24mbENbWjl!\F&7iZ+\=4?R9UDr7;d"h.R;dGN*t-pL$J<%pt9[B72=%9:W2:@>af`fh3fk+PKp7jJ2oqPA^U9ASD^>\Mcj[TT6:dWp&76E)"ueWiP,UURtQk5U&-ecj&3m>3N@GLW_T"RM$=@2%_+HRf`Bpq">eWP7kq;^cMb\IU)D;#O<_Yt,eh*<\E:BO4fbqOX47<8qCGHWkcM)95kRX$;eG=]<[lkf+&@%&pW7P3A_GNFkKj-H7%W4+?B+em#ae*j?alantQ;GD6sSLdaJ3hrB6.S13mqU8k@J@b4QJSlh)L4%gJ?S3Z<)JZ5um@JKuB`.J\pN"cG;3NkB(9qj9S).],%+7utiF[o4T$UldCpGebc9ZT@:A(EB&A&ihXje11UF/+S[^n/O]>djtYW[Mhb$^sF/Ac*cQ$)jTMK\7&QAu"9+UimIsPQ2dJ%Y-5I%'ocGDL38heQY+]DYSPZ*'=]ECGsK-3$Io#(.0b)P#(j;ORD>IKBa.;LMH$nk/5k:B>0<h-\#eb-JUAY+Lrsa=oQ/H?FGGeC%d]*g%T!,-L)pKS?aVZ2g!pFZB?;j2Y0'"63WB9E9-8PWma.do[nI;VWa(4m^-+0dh@61.;,-]ShMFKSj9HtW;lhtBW[d!\`<s2)?BWDlX%RSV*g2(oNag=pR'Yl>2:ZGgc+^;34I\DFH0ec+J9d$IZ)%#7#8S&'(A2R02=UQ3;EWa[U6mEF]>^r7$#a9MUbgKOd^F)=ub9W#8a%c=AN`7W"lt#[=WDFU7`5.n=HOZ8?;8FfA6mW(i=VDb]*.Mb&=SS\7b;AqW7:7pmF-6,^"l'$heY4+hK57TCn?V5a:b1bquc(X*We%C;/G26`?TlKbQka8Ne8*)n.fmcfRjbAb@1+X,-oRHu@_\mlM^C)SPThb]oabEO,?VbY/"#SI+Z"\6Go\-O7ishOn^`%s(Q1MCBh"%L:([sR'/>k6enL+mf)6!c%^_aBMH#PH='_#oU2ap,fZ,5J`m.J.Ue=P(+4fa:GFc`*UF`YD7)7FhQ=6t<9Go,\^R`>mr_)%Yq=.F%-<h(]1`c8g0gSW@V`13:JJ?X;$qHK;BZTH$i4`Sr#BNtI*FgF:8%g&Z#,YK8h)b.==.C#/caZGs^BPo]f%(jn&7o$V4EsB.i*U*f%#$*cki1k1R3[5CWDFY\Prk\cLrTNn4=pPf@1aUpKk"SE1!=?#"L%2s7FWsE#PQt!]4VMf9=.#IN*EVGXS`lZFf?FVh0^Ii1B8[qk%g7@b9e2Cmg6rV9d$R;5qA#ZXP\W"%:#$n$FF;B[X55HmMc<?9XpKsHdM"&tLO_$mT^FLR:,Jd)bdBm,D=kf.fLtm0Kck\M+cPIgG%6c"qu\3X6t'4)@;bA1YOSS9/g2]CEleC:(o%Bkk)PMXY61UMuI+U=^;/1OYa,s()"QIM_k3KkJMe5](]7QVt1r8n*fEK\"6<D?O&%ljr6rpT]E[%i'pn-eQS$ejuf3+g>[5SN0P7.@UdTE.MjO0@k?"Ju`OIUil>\ND(a%;;$=S"qk3iha4Hrk7i/MBI/d/nns'&:i61h%S0A\nCa(2m27TJq2BP3)-=S1K"R>D+#'uq)SoirZ"9Un=@%[lt;F:W-I4\9+(JU`%+Uj)")FF%)R4AWjkpHJpr+3->:W5s/TPA-t%R#Sj-K=U;cP_fT?!l<[4Jqn8Lm,1"D9*OM,2dET5kH5SSdTa<Z<SP5Im$-@o]<"uS"V37!+!1H$<:kjHT.;Ot-hQqS&`K3n:G?#G%m)J2cc8k;BQ90H<1:>`o*"4)-bU*DGV897;/-et>2l0""F"*E@^*:sM]TrnOpmpEnnb$2%Q?[0[?;GHr8$R]!QHRGUnsN));tQ[i%*B5,r?T[n5UO*ejS6lLBs64qM%=O$>?Jcrui%f?[F#gc_H,@c3a$^I,I!?PrVqh1Q%i!?I0;SABi]cm\Ih7(29Th=se!E^qg<6-K%Rq3,Bq9\d+po'=HB2c3jRn.+2+1l]AbHo69VK?1U];ck5%squ)aY>Z\@Q8=XqJ.F:<esET5ea"qd[\Wqqsu>)(Ng@j1XXjOO'W8P%Z?`IU\E9A1?b9!]Qc2+[aj&,&R/$bt41,cg;k,gNTi<n8qUtm:5H?%$mTg.XR%i?Ug!e('\ULI,jE!F^Iu``9qRgn'2!i`R9aht@%YM:_cl%-l6S$Ut>I]"dk0t,&4!d^E_pHg69\Pnhrd;Ag!f@dbdlZX8Z]4EHci'b''X\(g_PJ$CWl?*I.X^BnK%-F#2p9lUFH)",A%RHjKo>JJX%ph6kfNSNMg?!]C=+$VgnU!qTLSdN:2raOBtSK_>*QBc632gaPE:SC_%W`,6#]c26Q*M*stW8#rmK1aGp'uNf,UU.(V%;5]u<o<.g+G7$=,7\r^11#>Rm\t..<:V9Q&[FjR!DPG`3U6jQLQ>aL(gn!]SFgc[/]ma>ViCU4OVNNQE%6@4"mp'2Fp2R!tO"'61%]6e!::ULSD:(\u#pUsq]lV$&/X.eXS?DfD/mWNO<IWVFthucbs2P7F$T[SDq]]YPF/pZM<6(K@#l;!hj_B&%Yp6WCq:GpbBAb55V%FBX.kW[MJ*J&F/cb&Q64[q\/!jOa*N6IdOM"a>;+Qjnb[C-+TTH7@tc3dpKRQ^PZp^XG[IZ-aYH(5OI5k'HidgGeKkoW`RE0^?$d%>jpLG<1Tai8@Qk2jlLiuT@3-!]#d\U4)J&oeWE_,%H_uZ+/*"_kM"/UYFf`>o=CLLjLPB0:1%>uM]5ZocjT+30uc>H?2=.T4["/l%]Ib-,F?=nS7*Z6'rGDd_Dd?\%\NX&]Qh-gOrD(\!r3M1V]VsS!q(nO;Fc(MX(kh)7P\H:U4'RWCP%\mBjip.$3Xoh[k%oD%s1J8Y%6(K(Be=F;X/p7e+P&A%_!S'rObFG*BEMqSuelPdn)O\k-O11h3Ya.F/,G)sC6j7^Z1rl/]?&W6HO-;Eb2!6BE;ulXQ.qa4)e#,Xs%=92`X41JWZ4GHV+>"7.V?/BP+\bh5pXXr$#G;d\@KhaGe&`l]%m=KQV!-cTKg<HL(VV;XQGk[m8SMI]R1`$M7Vs3$>gVnFYFinF.%o.8c>[tA#d5ej[fg:M,Z+-6(e&a*ME49nRY0t>SYHeI)qZCQ8V>H\aC5pbU^(3W;HWl*E!j$^2Y_dX+nC!^Imp+[;k1;2-+/:$qg%M]7m5(+D.gT9Mt`&DO5RHB-9gb3/V>f,+=DqXO8a^U1g>21ra?;Qgf%qcf&ubNVlI\S(DTj/nS<?AEYr;lBAk\<CqV/Y?Kqn4F=L%BlUkTfPPgRb#sAF"5e7ki9&+RZk0b#R10OEW=i[b>3MfM\9cYSq]oPE4S85orR0/QO3dVp3N-!d&3IT(r9!0>cJ\*YT1SfnOO>eq%HYOiZ3amYbT)oN?]8[s,noHDR6_2ZN/U+]>8lkRW#IgUr`R`_X#\%_re&U<XI7s<On'-.Xg?1K@l'9P+LG.igdCIR.V%G:Zc47BO%rTq2d%HSKd1s<X]cTP'N-/I#2CW71[*dD!#8e:lOURON(5`Cq?VuD=JV"%/6PKKb<4.hme+\f@EPZ4ub\SC752"k'JW-!"]3\o8:%?i!hFhh-Cbhcc\((-UWr$^-3]^QRZsm,@"5NTTd;pF#\T4\:Y-O?.^"`6&R!X`"GBVq]VX@FpS$]<*hZj/j`)R-SRHgH05*"a+Hj%6LTZ^D'%@0nMa<g\iU^81:*i>NVO[X:@Z%oGDd<rF4d]qVG]sT)0C`=j"\=KU=UiqIdHLUE3;afn\gDKX]B(Y;Q%1%do:2]-aA&`%p\jAJ$/d2Be(EaleS4=Hk^r*,^Uq*0G8f6Y[86HV`R9#/"7U.Wc;iP3m-`0/e#gbSA(W6]*2n:X<rj.[LTXLP*Ks7!9Lc3a5oRcV%M#i-h@"BSd[XP+ZSrhW!lanVV1YZA+D)R=XJA2BuEOtM;<aWVug%N4c*n&$gRTjE[*ZH]VQ7lTOMHdld'kT(eE7)9@++dU'1-[);%O1l>pri9PELp3-m^3XsRTR7@b5&q'C^(K^!Z-WYK9s%^>*;:M3'#ZgI"`,X2:4<'k2/>P7(SW"(Or$<jV%*QQAhGp/LCtOSHrcmI%0C!"%gWO3P?KqW47TnSKg$$^iTKcm#@Cl#[RH(g/Ma%1ZDNlok0X<KK#,P_9bL\-B;NS)j>Nk6&W*.;oq2h89f'_=@:sn6F-A4Sh%4E^%\"Q[h(*luIgb<X)i(UQr?1VXpaBNiXkIroR$Gl7aQM;AU1\a-:0Gm3lm06ADr$djcPkI1u8fN^_CorDDZ%Iqp/eHM71A(N4R%40ajGJ]5:hrS4Q8=b'Qe[^3;A,F\D]OH5jJh;ne1h>)qu!N`%Gk&V=WA*-.<[es6tdN(lb\&iq!9cV"H\]gA3k#JAe?6=^J`i^GK%l+jJ"Gdbs<%7QPL[tio%JMt)S?rmOA\m`C_FfEf-8<qM4IV6FC>]XY@gN[HG:Y#dD/tjG`JM;`%9A=Jfr`p>.QTi"<Kr3"P@^QN-%+t='IOeIBE0S<D:="13!bET+mrg72gb8+LB1;8+1?2@em)L7YZRU@oB<fB/BgmEua]%f]N3kR'NHC_18`N8HDq43CBKj%%lo8@B%%.Yl*#YZC*m+"b)%QC[,j%hY"^)-[>-3a3u5@:R]G8aoP<Y0;sS^>J%$\AE[j=<Cs="eUehB!rslWMtae]"I7op<8cQg1<EI!)#b!%>B5"+ac+aGp8^fgWniuJX"3S&WqH<_/N4n;TqQZn0!@:>@"(s'Pl"'k)%Hr``8tN++597P3g+2XDuCBJDg2F;7(S`HT&'('"Zk&Z%CV><hlSk"c.q<+/H#5Lkhs6LI@@#]5;R8WJWAKZY-7NI&"sAZ^\kPIaa_TL]R$+4)S>9QE&eL$Qgtmaig+#DtIBN[NPW'^*0=#?,%6#3Z=<C3;fhJ6."+cFsHUnFU-RT^A3R4@*0gs`RU0Z>cSU)_X'Ac_,Vm&4&>$g?5Eqt/tu=R=VJ"])"+$DWlX>;6<RiNaM^I21(I%+>0kJc=[A/9%d*(&=8r]=HU9h1[O[]eHR<jI>CR(@a9(9Ehk.P\7mUu$pGlM:e42=?YSK#!s>;f*>I;/Ta[^:4q%]"WF<en]]"r#%>tcuO%5ECZ3bABCqS"fh5kE`QWp^l.4dS/nEPSjD+Y!+$^]Q)i6%u]NP!&Iqs.CW_5tbB!WN(/@)k6r)EFB%LL+C?XZ!2E&!_]45%!O*Q,\-]D!%e`LHY`pD^\58;IP"Uk&H?tjl@@Z!CNn#CmA4r"9$"-\0@6`N!0io:\b4#7'#0[5$((qQ5fjhGfXtqr%H?)&Fo;ufb%3!O[p)mcrPDee/(5%Y#jY8b@c\\*6hV4H!'EZH*iJ7JLPqBr^0?r/L01CIEZap+TKfMKpLZ.J3EK$99B7ofuGi0qk<c[ZpK;;/#P%6'TroQd#:!]!,tK[R#9fXrNMiNH!U5-".IG+B"iN7[Q2CRpI!uqoV(KROdV2`1u,ce?a2KZ#K9E[[1?663NJkRS@]("u'nmG<9Ph%E<I+AF.j%G<pA'`5UU7J3qd)e^Fr-jD<8Z;1ooBS($SI<`$6&![OS@do*46%f^<W)l=*6[*AeP>K3j_S<DVrmpO1O.ZS(b_&Nl,?%G'L;AY2WGcA]pkIq8INAMW>,/K3P&6:Ef<kCrbh:6>jd3/.&e\^[jJApMMXhFJ1f?FOZ]#/7-"0X6!'#7S2VE9Z+"r%Q.k.h71*-%%50D=P=$GJ1VTOP\m3nk,qXQaEASkD#(fI.2!CdL0ogE?;-QRlib7p:$RTEA!Y:8.+8V@G1sQ"$NH&`T1o)7!DQQ_3D+>Sj(rt>L%iFm)Pd?M)R<SQ3Bfdgt'`UN*XL`%bt;#uIEAUuY[C(3hEcPRR"'M!rT(,l73KRrJ5of!gdgW#.e4$H3A^K.>]3mtOGA-NG,LrnX_%%,!1Hbbe?Xc=HJEE]7:YqZ6V:N)`?6f/>XU+%sEbR=]2H9,<,Lc-\pYXlru9XP:!+#th>`>"<Qo`fssbP,k$\SbeD8anHsL^$l6p%KnB'WR_.P=O83*q9B-*pb@1Q0h[:1"NuG@$5+9Xg;H";*-m7XXd5kKaSb733Rn]9WE%<'KCn_q#rS#OLG2l--f4tP*ijbQPG!j6#%ST$&&UiFWSD?s"r+dI\d`q+mF'm7),hO5=IC"Fg#L*:jQ)pKIalrdC5eUUOE8Ain8:_kT-9&#L]C.c13)/t$de=H-Km93D(5\t7h%Ub%a'K#tJ[l.kXt'Tn!@l'ciag%!=^dE@26FbpK?8S/o?6t^#@F0;;Vq-5).dUZjniOMG(rXShB.=CASaia`c$FaAHHD"NZgD1_)%Z*C]5b-MdbYM7]=I3]ROB#gLE3#aPV8OMZFh(s$Q&Yg2"RQ03Q(_KaW8UHnV#A%E_G2fPPM[K]m.NmP<#7,FaSF9o7$2;MG6=a?M%'2F6g<&&LW&Tm%3Z>L)AGm'\]]9sKso*@C)9>Ca@kfb:8+<kqA0m#_1#WcE<=[.Yd4G&S]$a(R=VsT_/T[S`5>UbEQ4G$><]4:4F%3dFHmin,ASF;$BNjq2]%K\b?:FQO0W.LXA@0m&;G)bgI+>(Ta8,TB5T9l2;l8fr<<8>%2Kmk_RCRTX@aJ58?JiIU,t/hRBpr78$)%0=cL(07m-GZO&VYD5hX<Q/SOqkd>kO!N^63B7)&B?pTQedP`DkN1e0WS&#3?\2cSKKq>"2r$%/UA.n^:50P__](M/P2<`"FaIKN-%P!+K3$dELdI4i\C.c^#/qlV&DJpf7i`bZ'AUDlh$nPZ]\g1mc58l,>rd+$hg`+H6Cg0VFDV75gH'gs_C(#m]$AU^*R%L=WVDP6#%%@A\kE2J*u%Kk%1m)H44T+e?"Z<!j3P/"PHR:[W&T)VUEl/%n>@XuHqI2.1p)MV_LEb`eU^p(c&_Cpi4qJs_DR0W6jmoW*uRLeLUG%^/Dt%rUN3j=QV;t4Y4gr$2\^i"rA(HqS%SA0[&+BPDO+_@`5l>o`hhF*?/gY%RUUuIGgs@ZP=FEhD*o-*Q@Q./OBgc`:9fYR-PlI%GRFS\^T>hM7>QnAgPO1p/A18=6-LNb`lTK[K94>Cbi1)T.u5V`^WDn`eS1/R]NkYsNKcAdOb!C:ZOGP&M;>*2YZb66/m:,@a`+Cb%(\qQ0h2@d,FdjIqd#sR3ZtlE&l&&qTiGNG_ioV$"->m1,CFq#l8<NR'6KKb"8:<7f\%d_[O)]uF($uqAK8N9"+#;ORLQ*-2l/Z-T%_&5fs2&gXTAfFgj`BMPY&Z$IM[u-&CWL:bnr%oKW0jE9@O4.bX8p/ZD,0Ec-ZC*h0#%bjL_oCX^ig*@JT.[r@L=;aQOJiFH4)hK@%hQa@kWFFnh/Ic=.Cna?f>($X#W>lQ>C_nlHPTu*FTm+(S=Iae!.4m;8p3<aN]7]!4:G$ZL3u45(gG$>B`O;,enN%F'Pn3fenV/SM%BPJ7WXQi)nm)UA\E$c''BPUg_+:*sjq:I`:BXTHI0!@]khV&__!/n7_]k+.Q"J(2t9Xa,uGI5l<Tk;S5epcY&XO5M:-=RU/D:[KP%^ojEZcnjo7D<&'a3n&g.cWTL[?b)K5p7[!7n1eY#'DIjDip,me)b)CJL2h?Oa,`-_T";B)+N2f5L6/o]3JcVO3b'D5-2#,['Wub\%n*N9g8Lf&K1\\trf]XUZ71g-@W`ur04</5$[i[cm1`js'rilpP_l`C$C*t(JNecornSlFM:E:%Vl$,2Nd=SF;_s*_Ni5RYn%nE^r%lA2rEa2:b4f[\='/E>^M>6=#E32:V!2'.d`>,tm[=,Mbh3;(g](Y_2G7j)04k,]LTB%n\2F31We!*qDeNI2p-?4s<dIXD%_H=0&t%4X"[L@s4u.bnFDs8*/+%iiJA2r/-VAd#PBfXDu?-3+b^9D,Z(SNGnsh/iAIoFcQ#8Li"Fne6%'*+k/5D/!-IP7DKbnKfcn_P@=:W%g'6Z;M9mrrl;#rFg<#Y)/JI+.dQ$UP)n?Cp\$H\bW`gRH^FgCud?s4Ip?oL8mF[4)2\>=U*!R<[?85r4gQ[P="3`EsaT;H</MEHp%UJO;\dO$/9++H0cObt(3>X[l;cNYRkfe)6W)[?tSSZS+&MYp3]Oc%lG!8g2HW-,&(,#V9"cI=3DDJB+hBIf8^-4cHpjO."CO!QY$%Apbbe.2e^[hJ-ql$nXg)W7,Kcd5n=^_Wfg>2B<-;miM7H6fICa/_:Mee(#s-*X\gSmr(B(:@c!$'r/H?-lgt3>[AAD+mbh:h$C4<%Oh5\2K>^r5Fn1BKOZ[71d0hgDm1\]hBg@Em/2&cc/&QJlb"IIj4^>cGD"7Uel"sTNXpYg&B4@W7D%?D+MQ/tq`!GDJJ]aC$:9qn(%U9c$IHLgI^/QoZg>[JO@(PQIHp3cXUGZFTLMhUBb9kernHs+Sq0<Yj5YJCA<<^dWPWju34gced8gg50)7(+=Vm\T9l_DaofgM)\.%`DWOjgV1C;.6LRp+^itsn_qbAf^76DmL1lBZ%ef9G&/LE6<h^!_/@@&s-$<aRq[Q3PZOIIW.Nj6n(WSf6<`c#UKB(^@4W2>`u!p;%\LKt^E2mWO;g#;`,fgrCA8_".7bDQX3YB8)R7cM4A^G.#gD`4+]c'Dn]pJu8m3IWPXe'Ig)g%OKH-_3m*TIF;$^5scVi>KP:<VaB%7Cf9WpppNYaZEHQhD0$eeZ5[K`toU4opF>r-Elol1o_G;9GV2blU5g.Ml?kWkl=4d4"Znmn63HZWncY;q7'dW6<)CiWNpOac(W*V%bq>"3`&NgC_.DUaL8;tV=1$&r@PafTmHLV1F1#U,3Bc\kG^I?.RH3^<iDeF#XT>=+@s!X=JR@;L8`XuqE6siP?>1X@SF-.26Vu6Y%i,-fdb&:Gus'd`38$N,q+]28D)u8N1_b"RVdE=)?kO,on!]hbl_oAG8/F5&0MPej\V6c;BdpY)(hUEf(!Y'me)GR,_nPo#Eg2o0B%hLqsT+4i`sIP-9'HF)"@HHHJdrCoc1g%U))-^r>$8)?cnSR*k<U"+JNBKA:<$aIQc17HLKDpS:-FF(B=agYnmd<']>FIIOkerHWV%A$(F%CbhGSDb)"gCc7a-85e/X1nEM"l!&JcM5Jb'T65mf'r'sbRW<SgCF>QGY:67Ab139OZq[NJ'K6Uu[i(!)$&03,gJB_t;<Hl_%7apV@d]%8_DBPBC0:#ArcE9%"kpY8O@d-SG.p%\,dqcaL_lOGEV\`!=R.G=ZBKEh/3aLHH/"03dQHnb2)FJI'g>:=<*3LAXV`,lW%j>,BGCb(#r?YQB8!4f$'4!e>IWa%8Db[VFuM0*/GpgcJ[f$'R]LXk9u^,f1Sbf95(l,@,rSVhmIXg2!]K9L\kC57k<:9Cn-bX2bN%8K16$B/(Ym]A.#f8P]CA^ZEZB:6sRG<?0"h:]lXA2Y:+K;BLc%]dP_3mpi1`UuQr8a"jPfF17;kPiFTEfMBU=d@DM37(oQ#^">:d%?8Kisb@VmQH?XsNcXEkBGAF+e;fYO3#fBZ[PUNOg:3:,!,/GhTSIm4'o0TgRk&-H2iV6Y>\EsP>o_+Vc@mb5O\]jl@]i\-ITc6]X%j'+U2BA0TOMd_@4/h[@Ufugd6'hDsM<(*;I=U*<Vme\O%Pn7A;m)3=rE"Q2oK3ulDU`'Nc%Hm7Lar:i@&Oig?D*1\]g\F=:mr+$_%*8*`s[*<k`?#J(0l>iHONfJKlS+sehhQIa6Y-]\2CWC<dXk\e/oFnU<M0Me19Rgj>8bCbsA@M3t_MtZ0==`Y5U0e,"F%%g0G%eT_%gV4I7)Cl_]Y;h[6TIJ/uNZi0+1'H_%+CGSAML;U>51E,,o;d;<d5-\+9kmDXd"f4"4@cec5h6,q(g]urR)/9<i]N;g2tCsj4LJXG%iI4%0Ab@$1RTkYN3j$EhCa>TnhpS.SAin/N$;FDZq38qJJJJN%`BXY+'4-d6!h)r?]cW/dY\SgAjLADKYY.E<H9NTtaj>Kk43P:e%)p*%h@c,bNf"rWKS[2"8X-/N);r1"'3Ah]B<m?ll/An$`D4K[sF4?RG^/s>7G:P^X.&3E/S)@f-mM`P&*JML>CrF3UME0sK8"m2j%1R!BM\8\56EEYBnd;E>D@rfm1BkRC[>1<nXf%,*ZD7!g;kiB&$Ne@+M4d21J;o/[CJbXC;Laakg+k=d'VT:IO;hqFkk2Xo$@o@jJ%AS*lWM3;8k,/VoQ?;s1+;cfGU;[TqgWSLGY0tT_Fee(7e?UR\DG8.uKrVE[Vmk&Psj,/SeLCo\L_0LuT0bW%CL;eu:J<dT%fnsd_%F-Q+?C.ICn[i^>`2:t[u.*5u<LkT#C5K:)Jd1&b!k-M9*j'%BYhp(=\L=,d7XEqBAEXT#lisJBKN41o\e?c9m9W.+rp$X#dl'I6-%?G_$eM:$0mibXojKb1qu>k5%>?b*cuh3VbEq-)eC\6+RZMT%oh&]EJqE[krihN;i'JosYMLTN][4m9r(*I&Xtio0C[/'c%uC!ilT%LkcB+pWe_LnDYMjmt#+\'SJt#s!V/H)2?b()Ks8&XpX=rSL1f,-o&82i+#*_Y9pN(eSpuB<1Sdr':_^dW^G6E[i`kC=aO/frb_H>%6doYj=4T>:06j`$Xj/n]='q>q8Tqf"h1Jl$[r:;G6`)WL\t\7rFmS"'F7@R9l?$DLKQhmGl4i\r;Ae9T6e)a`MWBKV:<te5MF^\0%*p4E'0KioP;l[<FX'Y.tWJn#;Y3BkeR_gu99]ubQ,2lRg,PBV:=c%9B599"UGDo*+K&BaP)V!K3f_6IDgRB9W<j",[$]/m$cd.K_%S>u1/1akks0ZML@#*)^/1UB3.XSgeZk$0-jYI/#t"jMGZY`QJbW&1RQ-ha=`X9'*cE2&h"gA2r[cIu(;hY_%?/K<Q!Ata`5;,`G5%1`;O7VmbD)iS.(N-]\,3b_Dq^V+".\NlZIPRZ<P:74&prFVgM#YVFnRRIXThqtLe:/iL7!cA@=(fhhWIh/I$p!IcY>i04I@m;ZG/%fQ12,f36E_L=Y/-OgVp\pdQgXAQ_;QcGjN*0Xg#\/@?7,9R0^0ZV,aVTaTsf"C5o>Ngf?O2%A([7i\DL/N9FL)]F@Z[fP5Cora\Y%bip#In6GT[!H8@5nRYdF9QlRn7?GR2bn(3eJuWrs);CS=5iXZU*1[7rV&"gVLm0^7Fsu:Tq)ntC@]Z[/iYC$Hiunl?N;^b58E9?(%<;^&M&5\8C[9Q!D^NUI9WK`X]d[$kKD6Mi>fNPVchjA!!&(^Ml2J.?FDIZq/XA#QIM\AE)P@QTY1!:hH:*=/:jMqSF@YTkV_M*uG%6VRt3NilYJ$IEZ!T_9E>_^<sUW/%4`Q(n?H`W3/N:Ni=,:RfDI8JIiR(dO99Ad0ql-)7%Y<n't\T[$$")ZsanARd(pclDG435<oj%5eAb$2KWJn-pSGMM(fjqYKu]3C4f+RoJ3^h4t3*E/)9tmq.)#2T1mBTARt\58bn<@&iZ5CcQF9S_b'ZognhH*;Ef63X?Vo5:R/\8%NMLs%+Z3bjb#;/@H>_IE%G'\71XG@Li,0sl]REU"\MeOgPU<Hgl?>TEoD4kNc.Le%=^F=FJI#EWf"2kncKf+,+cEt+D!1IIZO2+&%DrPX_!0"J_3A&(9HSq2RoeUep,WkSnH2YqjG1hL]]tAf',aWs\5<@Ef3dL\2.nQ4OQ'#=PkOgWuRZQ'<*P3Vgf?YF$bqaf/am3RX%F_C:eGjE"k)i1\&-i&P7kA&hcIcaf3`/(+0oD6S6D0f0j6<'Cb.MB?P:cZkfB:dXl"('?Ao<"!^[ds:JaiUr>?9b\0r@Q?@5!CJ(%e8%Jn1U:b%5D(*c.]`f_[%5fE)hgptoeVJQFILh-S7T3H8U/g3rQMVEWRk_3]RE<[f-IDhlL'[toD3/L?BNcVSZ&oQq4&lo6KlBJ%m_NLA5P'L[Jb-(9f.Up.e^&5!4pQ'<7[C+*oD5Fj;-k]U7Qs!@6G-_`LVpcRVAu^t]ko\GpRn#+O5*(.M7<esXF?2(dT6(fcpeGG%QIjGj>^'Cf9B1,#^X]0#-[G[7>6,ai'7'Q#Dt\.5O)K/H>/%[9S(Gt`.R*Nee2QZ/,d/:a3SLQ`-7:%8_%u=KIOdpbD(HMFDE$BF%?GE.I<^6Jj2OWb$EtJ)W7UA;j.lM<aE1GP+]G9ISI-[\!Qa?P940jE1NNKjBk/$PQGGhL`clfNaq8Cf!pf6q^R:l3Als_L-oeQps%j&G?M7a+fNB+`GWEY.hQQIjHCh/`J,IekRo\Tr4LQmXquhqHq>[ds9_$\lf&dFIjbR1"c/);i#Nr=kpSAG&l9(9?Wk1I&.<en(tr%IcgXF<-7M2H2U\R;[()XSL$;@lXt,"1qC09;-lIK;4Qt8oqOI$Ah9\1*2&X1b[ee*?a.,[FH><NImmB39$(_5q@Q*WNq^]#7C>][%BuAY)T('Jj^1icIB$=.>&0*#>L-VU!UB%,;$LqLFhh-FC#tO_b,()2[,>7(Aq/"'qo:EbploZ3[Ap4!>PB]9_#gP["dE/]#<u[s`%J_\/grKa@qn9a_kMs/aJF!@r3H*^fIIZ6"MH\7An3-!XLGtEJXS*rjSYGWJ%_.>ZUqH3V\g?U%HD7j/'S.A-WC@l%^rDN=c?=&LT%s6!\coBa((gjbdtmuJ5?n"jr@2WK!D>EclKl=G-&pAOa1hK:Lm4Rm!4G.sG>h`EI8B":UY'6pOKGdtWD.(J/m*T7E]\L^[i\u@C6%mE$eU4ZiV0c%`duD#'4LS*u&+].eAg&8@R2.0gA^V[p!W*ZXmnPcp9(ZhaLg2A84mkcuFI?#Y1*G.oB\=7XVY@K*JYVgp%<"SW6f%(](ocZ*DK5p<M"NBUh'Tgmg9SWgP'2PioW*NU-dk]sk,7eGcE)D-^2'pKfN=LU$L>8KoPdLSA@+/;KG6h+r\>_9./+;@e+d_l"mc%E*f3>j_Ufi-7iHD"SCt".;Z%-:'gREJiko9pS$Q-9C?A7-X<a#;u!meMCnt,?olku(<TkkXUBH$Ed[N1^,jNj'!J4LFSmgo8afpV%MbhCJ2*=g?E#1&=SAr,/ZIKm9S?Vd?V3#n(n^ZoI[euXU-k8=9()COfmX>&0RHX$>R!Yh*ED0j)-ObA"%X:BpiGGr1*_sHE>^IuQ%O)%/?^:f;e+XS+gq=.5`Z(hX%R0hlFLmTiEd*JI@q=uihK^^peQese_GceXR*u`AXo?mH_Ia^)?j)33G%5HmEW?=GB'YReO+@I$Q%ftLDcpKUQamtYgZ&OR:dGNp8Z_5SO&PcZjQ3mt>W<OqrGkt)%e>i>/[7FMYI:SYe(&3j_K@-O/_-(6R`acX$DcX*U<o,t$\S[*31%a*Ccr3'.CGI#oB24G'WD]PK5ujPU&kYDm1A[57_ZBXW-b^g]0TM;D6ad?Da,*gL&cE%0sGA0erq77](jIj`3SUJ#McPkI<`m5*?U%9$]+=*#!+T.d^64FeWKCL<Z_:,p!YARq8O1g$&/-+P>PC-*lpjBg2@BpCY"-hd:[49YPl3o&#YnguZd>DJicl7-"3grg*nD)[^Gl%;XG$+_Ae*i>j8uJ&csKScJl^M;4A65/K^Q=flL_SkCoG?.J?$Z^o=9c_l8u3!"s_6B)qJS!R?dRE-r@j:NMm2Pa7lkR4\S<jj+Z\%nbAS%'o5<UnMCe!42s)r'WYL=?nEfAJMlqj#ENpSNs<eZ[l"0IUYsT@B76/Xi/F&eB/2_c^U&&#_ek$Lo-:=@U4""r%2-WCg=NN@%Ju8tP80/<Sj/nktco$h+cL<5iM=^fPChW8^$?YX4#s>m$Rr9O-#>A1u#n<np`gA>e%cg!'FZUu?^2,sT`4M!Ki<S&sFfkH8Q1#s^%EEWpR<&8u*S.hFh(r7Ofd"8C.I4;P7mq8*$D=p:.,.%>4AJ%OMW;Gq%jb#l7X#'\A61$cq]K=;Xjo+Y>&6Y(O@0;44M#^@dSH+OC%EM\-[1mm)_f]Me/=&&$FX<T+9G4f@Rqu3#D?9RNknDk"I6jr[Hkc)k"&Pr`'O*TMDM!=*0<0%K(0/KE"B$X(sroFgg:VDFKk<hX=%(fkknE7$LD$?pMql+<&:G<On/;W?=KU?%6![AU(N1.+jIQJ=Pg.sRON$X.,gBUem8kf%W0I(C/YlUB*kRkod4QDV:?q;*cFD!rd=%EAUtQHL"dnn7=MBku>GO50il=mq"\4OK5FZ92=?q?XINY))V*oqWLt3BY$kPU%;n#l'7(85-;-)_lGiljKP*@d6Rs&0T1\nge=:p%SFG7]<To\dFQT(?@J)1\p2kGZf#Hptq7l_D&i&69Ni%_Jhs'tedFm)m?(4r'"Zg]XhjurOr:N<PYJ;`,Y-2-r<MD9gbNLXu*ao!F%a1-12en'#2ia2HO)<T4XlLc_"`qHGkf/Gr8q<=hd$6T&pS),#,e(YeUq_HJQNT*%bl=KEPn:_NRHcN?3Y<5Rua+.B1\(P]hL#(^]%?inkA9q];eh`h+Fm^'T^)IQFF(B'U?(&;.<rG2k?'46bQUpmNRR6`L7>.Mb@cG.PYBQC>WIY9uZ5Rl+W+pN'l>8Z/Sh5*S#`BUgN%51H5)%e6g@m:4N,G`Q#oK\28.;B%f\!FZY3^E5p9lj_TM5?J_(_-qQAia2BV1%Su+>==,tcWRCj\@NA@M6r2>c=jH$Pp2e5_e$2Y%6p=I8XPif>Hg+NOj[I*B]EZQ()N*WVbNN=G6Q*>T2NKO4P<82K0B6f*QisG%8XJ+:EmHA-FhWYZ^gUEUAU\j5P@JAio,KR]C?Gc\%VBmeqG7N8-5M3rb>n585V[.TkN,[G7:Ujh[#=8=aCiL:[idkSbpCq\ANi+ek'n)7dmfl%q]"9OLa(LIW$=/JrQ88!rU\j'hZk./i%6[YMsj8OG+WG1q<.&L%"mIn)LK_M/2"f&ZWpZPZ%WdG#+.lfe#\kTB\Q-3Y:&\:"O\"^cb#-id9]q"\s>R&h(W8>m81TmTmnY]`:%,QsFK>4D$eg_]=QLHUnc)6<'.%<CB[X)l7\DG6W?IKgU^SVU"Q.aF`\JRu=`'B,F[-*]#ihK-_p]b3R&*8WuEP`#^4QeRB*^qf"N%]5,eg`$Z:WcLE^)rZF.=.GslR0c@e1gQ)F3j;?)CHUrf@,f)>$6QGQc!Rm]KGh2Zs#g^5nJe5@-Q])#pKumiq-(8'pXF)[+r$-0&%'Bii1.Tg2sjOK\1,Hicp0VV;gE(13!VE*nHZ6uk<D[CUM;>V&^\HN.M7onK*k*+EYeh`/Kaea0e_AsU]T8[cf^@':c,MUn/<RnS7%$!7"3Lb1cqZ.nC5`9%TBU8?TTG6OkQjmg]P?[PKQ!Q#FEJ\ZWjGniUVMom/md<oYHeK@+*bqC@c4OQJs5+G20\5e,'A.AYD1$Fof%3qrFQ+EVX:$6WmA!YC#[4nOn>K)e6j^nudi^Yj$$5c?h7[Q`G(n:9T\,"S4dq[u00/Qitp]eb$lR"u&@+:.K@ADGu;\NVL:-B&n*%E"T4qC/#7D]Zi1@]Xgh%+0tu<'VTCE-bYkd+Q#:qIi:.1g4P$H.ef&&F;J7r)C/Eg3<fO>gX@:cP1E1#C4OTs@i$eX`o*Vs;F0%S%@Wn^)8+T9Lm"&9tHo,04_I7gK<mhG=[6P;0L'3L&.uf,8eJYYpNEkU]/2e):mhIZ[)B^r,Ms3(jnBqVDqCks-&CUZW2/W,!XCQ(B%bH>prku_*7n++WbL[V=0C-JV3auCa7HNI_@2J,Bsb\r.YG1Y?L@U(GAR,9padQia\Od2de,D[M+>2YcTAmDBr+X!;gY1&&0Q9joZ%RO0GA=Cj>k1.EC3CaFrL35Ps?Nf4LG#+pOHi.aRjpX!4j]:F/kZPtGXb?cC(/gZZ+O*`;b6/G?L[iYEZGGfoF%R+?T_eY"o2X>hN%`:<P0-7_@0]l5l),Xn1187k(P\Cql_%E[?I(,2/cbf)b05:"5h`YXIE?#0c(jB%s594tc&p[MS%E_qcj#fQG6m9NNOj7CF";bG=t%]8(#R:i$osE>h^&6j6C7C-YVm$Bil%kUdL0m"r&XVdM_,i<)[mc1%68W9n1qLp+bZ/)1878F`ZQs#tWSpc!;DDWpoHp\#b:+TUjg%WjErtq0X;ijBcc]Z:Nki+OrMp<6!d"7,NdCVf(\_(:i$gPq1Y]27`V__Su0SFpq1^Uhb0IE(J:Og#1IbKeGi\7qhUO+mu3#R0,)D%mnQP9I`Jt)IBXM.hXs\&X;`7"Jhq6(J?A2Y4lKBUdGd"ubU2c+\1nkc!Y-[!i:83ZpM*jQ@s!VH/<5b+W!2q<^4hs7]/):;gE2Fb%Z0f3^m!S\QNCjFs3;)C/KXhW3lsK^".W"j-g4YAfdTl#Xm^qC`:[_)`E?:f8C'Q;?#cspOd:)aC#UUmc_92n_/pQ@WSog6C3shFn%)_&!/(AZe8=ouBWhM;[%Pq&DuH*V6<aV6ab5@)6gr4pA4XKPOa:=/q!289c5%)da:'#_'g?.&Xd`1X).T^WtuWN?q0F.ZZ&l8F(X%RB^QtR!YFu9&dZO,"TR&%e"du>Eg6$=PaHW;$0)*Ult]`2\/,/K'NJX_[qHS6moO(+\.aXA8IeZ*%ctD8Tr(jSu':@7!Blu^Snmd%5um?u+u3%Bg4u)*^:h-CQ9A5#V\iP+;7F;uZP!DiZ/CQi+&),;I#MS[TH-dl2J.gS&B@%u3PsHbk9VHjoPC2qE"CeNpG--`.muM8%VLlL=,+mF,`C<:KaZa5f^01LMY3ch]M+u"jJ[aHaKsd.kSPl^)1`+A,F?*$fOb^^S5O\".*HS&@+2`2\kc0j0o>B/^"j8k9E;o=G%WJF]I+3nb!,^N=q4^?RR,:'D\]L3#Nbo^P)&U?H]6_5GJP\o%)hG05j%U76gE4K@aiYBbr]6tDpT=uXtiOa`KLdT*h!sNWH944MT%i\6oaRe+Q#S/#Z3r'C,qT@Ta94WL`_ko>':4:692g#rS+T=5!J,Oig%/C!Xt54&Hu^5@A5]ErO%3b3"<`5bODSW^e%e3$&%;&0;+%PE5d=7HR^k%g3iQ+fisnm>7TPlb?E1^n1)r`R9IN9Hd%CoLYc*;ikcAerhI-?Xk9W#khf@1'QU"?Qi>bTA<m=SJJjCFl\<V,mBn#%2$!G9U+?;V>qIJnHZ10o^u6uq^)+`uYi6,'-WaMl6o;fiLe@OfHD<E3%iB`=fE4,Kob-dA5C:O,DoLH4^KYTKS_Z5]+?oKq-4Y?K%\Nj.jS7%Ah[lLTjRhmrfJ;:>%=]Hr--^00AKerenGHV%YG:1`1l@h#"?"^]GY*3E$?Y;ks19%Ql,rV"PF4`4/l2*+$Lth6'rWW+)%.+'GL$W&X`+[7@^$rZg>7e8792g/@c2fV%4d\7S4&`"c$_ZD>J)%56ZC_.`WOF)bL=Kh@T1(9k9l<sZ9`b/?Ig%bq'#`/[I:8QC'%FP(o>4IDgA.a71._gmfF`)hbO,$R4f-1$9NnOVpY#)X6RAnHj>"pK!foH1!Ve#@(.IpRLN2<pc+1l]E,CmI6NQ?'gb/!m`0oC_R?%f:24_>IgkRaWP'2qeG2%=2f0Ca>2h,(X`6nD=3Sd.JR/1/V=7d'_NZQ&./,<8H\MKS;NVRFgRhdl+!$mAshUZo8rQNn-scH]T*1_%o.`fA@AI0k$ma+j)`WWK"lU5pfqTP%HZR^OE3/rT16%Hp8Ousc=mSA$^DtFa9S?<'n.Q<Oa=Gd@pKE#\U";n&=_JD3O1Wb4nE8tY%p<1Jp?rcM`\sNq2huo-RhV.oPU>?+j::6!NP:Ii^j#Qo`W>s6gGG,K;rOWOj,Dp"^^<,j7Kd:ED:keN>Cba!(_M:^Y&J`cNOmH*!%(+3)J_<&'R:7Q[>MYShq5-RD4;Z+h3YTkBsVXT.p?fW$*M*Qed"V?&o$U4sa3t$WDU4]WqaS`.ag#MT]II[F=AGaN25SaE.+fUBC%\Hq.sL"hq*nSK%r=n;r;o!tNDEqYB7SO._Og)3k^m^o*F;///re(=k4FZc@arY>:nh0X<Toe8S?V*IFD5QShMIi"q#L*U&<2645L%.kl(!KHo&PAm5=q2Q'aODQ9UT!4Od]3bXc\!rpdl0.(RLP[L2YrBDK.M"/Q%#o9uA%b-Cf=<N4g^u##-_o<@+3e:T7(8m81LW#?L%TnXE5.!A4!ojamKC*fH$pX2h_YR_09m5ZCT@#4KI2R(5_m-fRO9f'tX*gd-UEGlUMb8676;9o7f@8UNkWo+.nAt'o'\C\2b.-6*$%rMd!k.LQQ7DpR.g$$4i(N_S/VFi)olJRo[-/Qg1W@:l#(]MV,NXDFF][nUQ(L6;XX**FY&7Y)so@@R%@!\<%l\jS[E5qiM.3J5#<%7E2H&qrdek$XH\#M8NB(9Ft`g!hp.t!60Y%^",2rkiMeK@m%7_4(OB7M\%E[U5873.3"]kT?Rh6GkDAbe0[nT5ne5BVMk_"";[0_%54doP7hFRfW1iUlQBlb`6b7aD62"W>N1Z7p52rVu#^1PhaiAXuHTcf#6%hK,'/%%(lF^#,9Ehe+e7nH7.gJg*@/)iQ;TN8Y,*_de%([IY5!.1dQiPJcd!qij__abkP1]h1W"l`k-L/!q#k>i%G9_%36c[O0j&M,X#iJaCh"cL!LTjSI3#o6;2R(cte[injM[QXqJ7=8!Q%,ZrF#:[UMN9<\u03Q.DQg0IoeG:p)C4r$K)Ks5PbCTL@Cd49fVN,4naL='*Z2f6aV\^E=c9IlM4T;:/LAO]NM>mRV8p*btliYUOI%<TVUtn?JdkRVK'X[S]32_'EMMi.VVeq%b\XPemr6LpF",=NR_FM0VEm-c^D&Dm>..+(UQZ=8%/NiX+5PM)?eiEJ<m`$NEJGMah6:%N^ss`8Z0aM7(T>%]0G-(s2WR,#0oEVUl0^!Q_b'j<tV\`?%Btk>.Qs%;D+,O`;bL4+^-(oF<Od2%*0<%PCE=,@Y<*_^plA]HO!I=%4\'Y)70sp/C$@r)qaT$pa!6gA*cRq`&#5tB6+TlZ)l/C<SiL['6i:itTSg6S]u]A$VMA9bBP69K06!qN=Y+A^(KYA[(0IX\hGA^A%@R8nNo&hP>ZG"-:[4,33T&&b=l<LP!OrN.6@'OBn/^5.:=Vi;OjD1`P$tS4$Fp_LMT[A9QNX%STN%hJP_'iPp8$%:r$IK?'K0?Nu%FHI=)&E"h2j7XUe]W9=*<#4"a9Uh9\T>iUBLKV.7,->hD^aGrhdWLD-F!1/]#\'h)q/WX43<^"(=n^fB,DJ#_VTc`$L[1[W'J(#g%-kuLlKP)3kLI;!g`[Q`#)$nMEZ+3epVou=$)2N%2gqY@phAM-ba#8/LU-8Ykr;&=!$A-Shp]GF.?%ru'+kaA!+\NM!WA!tOZ:seR%R]9m*=bA'+D`hj<a%XDFb\U+QOR3de=8jY,Ke-)7:3\^2Z&n>fM":^893r<)MZn/1]Vl.1@a@LZ$`p%d&:8Y7<>Gu)q!7_]ERhN;%I%M#SX8W-XKjd*LkZ$L]-Q_Y9<S28i&5PdHE2p/$;PB4*S3'a'E2df%X^!c:`OK4J$:Et`M-I.B?Em#'9sQr8'tr+]#H!#S6/*":%f%sJc?E>^ob)J)CM$qHn$Hi*oS;\lB-gm4XlU#8Y$?[&l)o\687JMBoPbh/Z:-e&./:s_-oQd)E/8jF,T#!bXLSY,Xq?52k/.5'K%*0'imK(Om<kQZ5N?e@NF1QCCl6FoEIGX^%L#Qde7Sh/>uVaX!"SJ#1JT&Iii6%]PiC=qa46F3:*+[Mufr[$eQb<GAJ#No_L&VJ@0%n`N:KJL;Cm(eQIFeO9me2q5hf/OU1\qb>&MS;8!hIs)bTL>Fq2Eji90Z,lpC6k%qaS0*<Qhq(!g_]jiYqhNE3R/;ctkr-d%Lq&n!%ZK8.B3PZjIHoY?NZ5cpq,[g!?^e%o9=eVIAbOORa1FE\\TLbN^m9W`"$^5dMa3=(J;a\d1bC^?'"&h^q:suPf0,/$YA3`&cfJ[Rr%mNKsc%6;&hDFVQ`3V(p`JF"$#(GQV5\k9oFdZS]@N'TCgE$So&]TuD<.BdB.P\mR:[_N6XFC3p?ArE1_*&9VeOj1QpkGQWn+9X5h%YIXKF-/k.@Ef8AcV2H(:]>50/mWjUUhejM'@`lUMPT8=..#+O5Yu$i9BbKku\'nT]*iP/&%L%DJ)H]KA5iM.0Z`qT^M4XAJgroZg%8.,(e(2l!fq3C;)5VY6T!D#2Y=_!/C#R.6`[';qD7gPW7e&D`[*.d:Y&P7SFon,`S+&m]o9c>MrEl?p'bU_s`P/&MrNJnU&nM*GK%JLZs1`;@P5CogI$.^0`]k)C*VnR@tB<WEpq7\&GLN(k&>4'aaF,Uu(LAQ*(Ba;O5P?"6=@G7/%4M3c:`JMDHA`X88MNfCSN(cka.%2X+OVG`7RZq)@DA@H^r^+@_uTm.kf[WuES]UJ%k7e@)V+.U<nH<`8Bhid@to(&4Y(j?Dtl%WO-ll2qUHRip66Rl26EnL9Nmb9hYM%LK<dg+p\JdjK>Bm!'VjX0Su'Ho!VQO.0=\Z'\$`"I0spHhrt?^P)lQa[i<@6FalCNH':T0\@"a]%2IN=DDOi%f]+),Zj!]WALoIl%Qr?u<Nu7^n\@ftnYG*+WOX#61"$AZgp(Hu6MDBn0)<e``%SRR@GE.8?KF#1S,#cPq"[/3[A-u8iKPOk]@am9".J.PMgoO3.pW8AG%ABD4'.`gA5S(8-[,Ljq(&8;nO`:!jtUe!3Vmp@[)4&n0QLi+18,32I;*X:WfUf<4tVKc,lbkW?JRXQ)ElV$>fV7Ps#KOG,+S8fgL%"Hdq,m,uJn;B-0Do4l0r6>OE=0I(<aSO4Yj0W,31?SNj^d5=RIB@iT,#nsXu(f%*Dfm*1r%s,(1TNPBfI@(m!CmZO4>FX2(q_181%E-^ER$>t!+6E+3-S:&D%65kNCMI%/N>ZLlP]oTb6#G6F["gFCWgUjEO6f`MUqCr#;U$!X^B-69E$.On4fuNSOEVAp*1I(aj5PZGM%\1CSRS=Y.N=gn2+=[3Tb19S0hU,qiNGBD$ek6d"[ON+LFb6qqu#DEdtfY&[,:I&_f&Zh6@7JJkX6BXX:TTuTI!\jsE^P%fhM(]#]%8E+I1b?*'"Ia5b+C?6rq[*jYjUF*H53FJ9GIZ'sH"e35p@RfV4]JU;7A5.G/-)YBr^ZDKPR^0+D\P(Pq<teVa-#ZM$GFj8g+]q8Q%V:Rj'd&p3$<G<S?1i=mITXPrs(AkiaNGe"=XbfM[6g]X22Y7VAd>LJ,6d9!A+cnXX1i5EsYN9#Wo,f:Dg?WGc-*WDI(QX5b/TaA.%6Z<J1M>5%%"!1Z(\C.6W"5@RBXVUe(io,`N1D\)nXF"?d_;eG?`5MgW*+8_8K$sn<Mj<ptUUa[4KYFA9\R&`H/&BZDSmM!]C6s?^%R)^Be<&"o'/e7N:J9(gIb:Dg'!Nf[KH5mr[Or9>fH)AE$Z3YSk9?r1=?/B_r'"_>(QB*Kf&qgL+h,#cP#u6714<-^L.Sf`@)^H>]%[QT^*M$!a`lJiJq#q5!]m3=@BquDDZA=:c94D1lW"Z,pgjp2J#%YF?i<LaBNjPO^<+f[]IG2FAsE.-:dZ%aBE<C0C<[cGN$@<L1]%K53%CQ\Kn*`#EH.HNrZ:9s_^Ya<,Nf'_o[`;"T@rS@8[]\aq4JIgdr?!/WXdDWFt/_b2RpIi(`8Q*bOoWZ,#ohXr<-9'DKN(mF3[%&0!h^!JpkQ7PkV5'll+,m_*fp\UWpjVjfYrS%=*Y(#2+`Yr'>!(kPjQ^k9@@LA8_r%O\8G9XpMMb+;!mjqh.Q!N?=/mGT`,#;^K^%bq0SNYJT_+ah5:ilIZsrRn:D=Oo*Yk(UT-%"e<;e$8NN=:a`.eMX8uFbdGofho2UuSLaMA3&Y^-n@KgPECSQ"m8R88=1UE8`_AGH%gZKga#I)]@\lj14R`5YsR#?4*DU$EF3d9B4G3uYTh@T=G5O@*\DkT0BY3alA,^Y5\-aA\@U)35oeT:+g6dp=@o043O['#rs%V"!3%!j/V@'3/`r0(0ml53q<8A`NOr7\lJU3><pC2\D0eDWP!N`_f9^n(*:c<NsLY,>pn0T!OT(PtDDMq^._[<]FaBZZ-PgV<t='<jZj;%)P?,^HgBIs7o$.GO^:pU,"D=d#b3](j&Ft=h[mhTqr';n)I>3h(\g0La*1&`WD:3N_UT:o2QbP!!DKp.<P[;mKajN\C%;2L0AWL:%ig$dbgU+36V*2!jVmgC-q0#Z]jU<@e[?X'L%-7naf>aA.)EC0U))PWo1.UWN)4:-b+/ES@49a=cioDP69rVq=fW,[4-Xf.sZmU)G%m5LK'Eq6k)_f=]-"X>$m6l!FF=N$SM<E9O)$Pli!c47eq'l4u7+P&=V*&.or1XCfhJJ4h^d$@KC]YTJf4j8f8H1L`2Xp.H>qTACu%5(@m$@:[?=*THSUfi%J!VPK-Rp+OCDaEEM,B>osB7UC^s^ksk+5fPZ7I<YO[ZXVk'BJ8OrCM0q'=u"skW60tu3\m8[P".iA^PXqM%oAh"'n%s&]]-Ah\+S@`*@s8L&Y([^J3*m7aD"s5l>;8I`LBGIT?I&nDe$ifU,pZ!2]X@d$QE;!KorB':D-mtg^Sm_%&M"'f,QBbS%L25hYId:,kK[nu<Xl"G*%+1!KG#"0%h'/bQ\TG+UrSMr]Vo[$/KdN^RC%gAB9,@e5$r)8PbF+j>MH1-pK;Cn6=1;WeaBi;oLnV@-%a^3k^_4G3l@'isn:^hkO@mej0#t$3I7+_FS9>Ecpi,5L?0AQbK->]b'TPA]bpdTrHkpGn(&&WSQXmOYlNM*hd@I#7Z3;l'Dq8fAV%L1s3chZ/9`&'<qZ=]'#'(Wh)hCUeR;UXGZQ%_I+@gnVB:b;d1.\%(YBS+i$%^&HUA)\:S>]K5V673b98T3Mf-at6=pID`=tn?e'd%s5m5"gOf3[1P;l')Q>O'1-Q`[)2>GOpg`NYgFCs+IL'_k+mL$Bp*b`J>Gqrb'r/!n8i(PtS^60lqso]Iknn/&in-d;ZX@dT/7oj*%B4-M)<O8(OoSWaH`1`9['j"j8GB^.V(i&)'%.X%G2&nu9eo%1[QW5%n<?C49Ls`\?+?iiY]rrPin@O4a^fC,;8@O5D!Q1o,].\6M%D&D2h_<6STFi2rfd/IL#+3%oG%3^lBM&SZ<Inn;)hG@7u)/C0KKIiPRc5CE@);#a#A(G%?LKVq-N>fa1gVPt'2JNpN/'&U\WW6Xj%@O,dRS,qAKS9q4?C0^!b&T_j>+>J_B]UM^CW+"f@[2G`om+M&NBBYk:"TfZoK!4B<))Vu4^Cd6bgm/D/)PAA[&p5W=/Z!R7@*q:D%nsnSf345l%e?Fa$gQ587A+Bh5:Wu69i\tc<hQ:og%'X#R,5).Hk@l>R@%#p']j'fY(gqn2/p:Md`6d:tU!h3gBr#HeT;uA-:1PFF%P_^K]-42DXNJSKeUP<<iZFkBsAYTGRHB;M\Z<*DNGSSothR`C"G&lT]3A:7:UP;!aGZ+EpC$b:6i@Y1YpMR)XB.1G!/=f%-PVZRi%S3U/?1WYSmgBhsj3Q'r94?h_i?aDZpSGptt;F=k_?5Xk5ds`0CHLTR4g_2Z%+Gh'db,H,h15Jq=6OAYZ]eZg6Z)NCFL?XSK>gJ/V%Kepbn[n#A)<KqPSM^A^mh[hZrT#Zd01@C8]1WTJKSj6#>8!/B"24>iZA^jDQ6WP1^X4`XgjDZu.<3g[;/u2YjV6H&Cs.2(1?pAoH%Q9sG>`E0+lg!7n;US&nVHF\qa>oUX)nNG0_Sdp+ScN@EQJN."en2ot_JbGEAfa,[F@O+9fHQpmr;;%OnR..IZ*-S&-'@"OEdQjE9%C\;8WJkSE^@*?la"0pc4,StusP\XmMU.Rg+6>Q(<,Si3S\Ua+^Rdh':8+g+M$HfTj4hJ@9;'db0+TSr`kZK\kHFBA!5YXNiOtSr]%B:Hd[E/8HLBq^)Y0aLcGkT`)W5O2a?d4YTb<M@s%i(Ck8hR[)[FC<Kd++E(0AeC;eKko093tX]^k="e(+i5gnKX*7QWc2ZnH1qQi%rjUlWU2hUUV\i\q"s5V/Tlr&_'MC/t7>uNDDl:kD\CeJ15E_"?r[L.H_0h1l49V5^VYYYK_k[1-B*PXd0-Sao^-tt(bAL6JN/li@%f=euFI;gu:a\TWn[][OCS$_X<0Xo!;%76M9\u;d&N7E,<>MLJKHRp>'H:D]C[=s:'Xk#,AM!kMg_/iK8M!SPE%I^)p"!RE#psD?f%-<S53Tj*n_,g&FA>Vh&9&8sWsc2PNVr4Cm0E_jbMeG[%E)N>(@XBH9AhlcSP71C?QglW%#j&Zi8%78^/q/n.q):9Ij,Qo8l7;MM_%=(/HnY(4t/K6H>9K*d/[SZsr`k_>rX>pUo`.R\%O^KFWqM6lVL/<u*3a`u#M]i^:!Za8?SI5lD*>l1[;^<X%OEIUlS%0fmd^DE_<%DtuO50AIFh1k/Z0f2M4fTJu*Gg`^\PR+,6a"aoEk<&*CV<I.;>^M;L>LRlj4F-fn]N;\.kckDH-+kH#eB"ng<rmUa$;HegRkk-Oe%#qe$#T$YSraV/8]3:%`f&2S"3&g<&-`:s3rppDkKhXHK`OtSPgn?AAm9i$h2)X2N*<BI^I<$q@ElgjE4T"uJIQ,EN.%l5%p'9^<:%6d69?..C2=U:DDSldc`\IP.D3hqWO*iQ`4_mhe7^4lJN\6F5Nsp@sE<X=$+oJ+NkjOYhl<?BohK\07P_8D97+gkI'oTA_BdcYZ3*%01?7uCdUP&86_8+%109]Ri@OO0T!665IVdbP%bhQ-2:q#`P%W/LQ/FXj^#PgqjWfu:`4+KS(XS?A"@q8'"Q+`&==d8-ME>)iAiQR%4XPKJI>R;&1\1Wk3sIn"!nsi'6N5c*%b^<Lakeiq^nlhmkkot"F#S`Q7m9c?,?Xf.6tbKLiPF\"-qMdJTFo;l5s\?km_IS(gtn1V%M5]QmhF#qKh?m\!7>J@1#hep5iZH+-4?hlVTE#[VPsCX@"9A]5gC2l1N2S]"VaXF5G-ZlhEQF-$Y^Nr_QqJYjM;Uq:Ll0qsP@<J,%#,pr!QE$\>mOY1&6!ZY9eQ-[+cNKc(Q!C.?P-TS<liffQQF(ho35Dk!IZ>Xuk@0!@-DU6^4&DA$_dJ=*$Kn;"<.crOib+j:D_<oo%;Dit8:BT-<XHrluqVH4+2ERE3kSlLcg#F3&Jl.A0_r48Gna_EkSgCg.hSN#ZCnS8<C&iQ/7&_LU_`:AD=V0SF*>q7.#a6lN;%=-_%Mt'_nG5WXL]:26EB4JkV%h;p"b60N).*N&Ql^/b5H9E)b_1V^T$aA6/T\pRm[Rn=7W-q:SNc6A5d.6jk_n.6(rPR_+*8L`YLl-d!%<.pC628M_1?g_>J!sT-qA.A=pfb^+7m1QP;P(cZ?KMHl,-Xcr,K$iAqMaP]GIMlV(Sk0WZokfs+..832S8bC?m`rcr@T'H\)%D">%$CF`q&3SDai82d7#k7-VmqEo;n^'OOA0q?hNd)EI!UkU&<<PT=.Y@^jo-K"h$e?LK)Zh1Lq&5/V#^@($H4lN/+EWK,+=mg.!^uq^%5WE#)fY@("5k)_S&%d#S+I?do"N2qf)hKRb?BV5-en81i66pB'#@OXe';:e%.4EW#6oX&pC7=o;p`)/bBjgr%=#Jq,3bne:q1'MT%R*u.$g5qb2[t8Bij"9:!kr#-.9%,-F[*\>"BS/#1er3&KRg(i]91YmG.@_7)\r#Sp`ioag%7%3!#\m_!\j9'`Rl>jWN("EE7:<e`%'YSHsJR0!J<s*?]$/$/JbA/kj2B0).NR#A>g]7@.@T.@NcUi^d(h0Ng'p`Iu@\l?eRO4n#`Y+MJ>@)QPcJf&j>LcnCk*Ckk^r)-2%TkYdfatM8GI'RcU3*pm,lSZ-Q,%U5X-U<u6L_>`9!N,]5Z*V0aX':"5Kk26.BlU0%N#e3Mj-[Ca@d@B2)RXO<&TMVEVSUgr:"J_L%"<:@$UAO:_O5dcMQ<I$u8%.:X^4L""*LZ;K%jPjeHnS>rPH2qK)>hOo=eBrncgeL88Bo0Z^QNpd:HsaunB"e\P$S^<,^gNoDki-J%YRg&K?nDq45On(nZ:CGeK!$<]>4Ek=MS\P\5/e[q$qUqbh&F^n@RPUK&sX/&L/u4c5$fLMVk5S4002usO=k2NHaj'ZINqN&4XUK_%4&NRs>'uYD<%8sAX,qKp4_sr+@c^Om>Z!rYZ+a0O_0Q0E-:=#56t:brV_$4VCUjiJGttj)I1HBicNV9%iF5:+pp-TW$1S]qkQNqc%*lT$UgWS+JD!+-k^%4."QA:[*D/@_<7rs:(-QE5a\Y?m6:'Z8G(e*9`q,ZsdM,.r1eBjr<Einm6.rbJkjZrN&:pm2,OgEm'H1OiO%]:4,m?S6PWjnjK7m-Rk*IHWp8o'W)p&\Y>VeC=M*HXGNKa`1S[$g'\/0+9,Bqf)CSAn4/]Cha\2&eo&^OFZ7Cb]'<n01hY-6L.9n%Hb/(7WukJLKn=/l&1$Y5Vs^NFIHT0\p%7mhpG^,E?eG6/kUu=N5PmN5&+@7`Vu?KSlkos9fDA/%-/Zb4kb$fop3si-o8M2B&)6_a%nlL9<iNM`uaoCkB?b_-bE(>NN2t-e),@*#!d>'\CqCS.>)0J$dT%[`?]D,,Ar1WAYklmY=pfmXPou!DN^oDkY?b\2)FhW6)2\3jG%3O1tar96_`/.MUPJ)^LE5CBY`$i7?10_:/odguGua1oQCiOAT6IY9Q(14F`-473p[^#Qm-kJ-nds7lPR@<pWI\hc(`KO=%`kh1.a%iD_=G:-f6hIeS?,[uI^1DDut<K24`*[i2]!hAOD8f3eITT>7+Jpp[GVop\a,r6ZTmJ%h`arF[5PJc@m98':!>[l+^7TKiE_gUGQ'%OhUehnYb,'+27XNcbF_n2tn-'q<ZRk56&O\])[9KP99ha8+/UTq]OW(L[AG5^,;Y<59/87:Z$p()]t(G5MYtQpW%bJpi?;YcURt"%gia08J:AC@s(*2Lp9?iia-Vjo5CW1ujZi*mO5V<Jhd2i;kq&Zj.-on,401r%9"h^SS#u>ZoF(^AGVajKc1YoLcL2#.%jS:XaK&sd%I'S'Doi5IJjd<di`ug/u?ZY_2Q)FR;,<J#[Jq]EKYk3%!h04;KU[o[@Tu):.b;f%qGj%BhHb0"VBAtm@p;ada$Ogp,NACTr55O@5%O$<O;otQIGHp->7ou1R9s$;1MhM09na,0<IUHX.4iOSLKefWfGp>^f"hhLndhMLP7gVs30;rQna3m8u0#gX$\*Q_Chil8m/0V6<[%-H'Ic_Bk#u1?d%*htC+2qc1W]V=^!@L)u-X#+Prf_K_lBT5*XXUdrSGLo4.lF+*`/3<)l(>PaOrgV5M8=4+r/s4/p?@m:#'KX&a4%Ul2S%H)aA\Shf<O;hb4`YtW2B%HbFr)`ubPmrBK%OiG\&O'SG5%OH5t3/>Y-0JVLL\KHCY)!kVY&<q?#?2@L(,7U.T+1X]mD<nU(%m-kNVdDl8P)hZr=8<$7!Vn^"&aj@f"Og+%>GjlIFkS\EgWt@hirZ9,>Jt_gAQ]<XPYlXFZhqi)Vo%T]ED_\cJ?6e?N5]`XSklsEr%)[8*MJae."".FRlV!c>1EElt)<;+qQ)q=_N9%i=l(t>k[E4,H#+HR%c)8Sl=^P>*,V+s^\HBqH_Jap2gaM6B8n(I$B>7Y7/@^6Wf%%=oGV0Y"lQJZLp[77Y@REN'7@\\GjiI?je05Pk:o7XaT3c%`%$EOh\G=<KONC4rAArZ2<S?c:pf"ESs&L4nFCXj5e4b5u&4o($_R%m1&UcN&C+b^!Wg,\YZr''dQ?e--_Z1e#"Ia9=\IW4ZY2T33[KrP"srp:#3[8.$W\J#S@"<0]jm\PWT43i-QNdGq`-?C1><s8#JVP%)1I-,($Z,r48oU`J4F=Orp@SVUpLK/!9(f.!"7J=^RZU3Q#b9++cV'X10]=0LJ9B,Vdtd\B<Ws:$ged6Yh0?Y6^EiKL:Tkrf5S"*%YU[`GcIG3And)Tdndp!k6Dt[F7hH'J5rMnFUuR&bRYa/u,M*%t<Dd#(M5?^_M;e;&)(M0nR:OEBkt7m=Ns\jJM?At7PHVR^_Wit=%.g?O"KnBQ$`U>7:]S4>qH/VUhm3AnaqJ59/ie`6-KrWSJ8Y_JJU/k^0RcH<'EAXiLaH/G`=lO<u,,o]+O?C5nm+>L]UI%E8q!L^L%c5lSRb*W)i^=a0N._\MaP=5BWSs$'Xm',D<q#j.E,Y:G"(`u2oj0WDi[BNA*Rng6sTCKI`Uj<"\8P=:rhed8`L=*10NuNp+RADb:%NWA!uoUS_;UrpB4\0AiB)sK#W[\'@U:RaJ\"&to^T[4d)Tp*JeC\3"E/7"BZB3g6+Q>T5tCefJ%m8%R[c7I2$`o7FfJdk[>,i4X,%l4%GO;1O9'5_69IL%*jc!GRJ:&JUPDLJ]H[:FaO-aS;1Ka&gd2V6NO*e5qYi#3C_#22<ob22jgaU:trm0c9.4fX)R;TH/"\g,5qt%Grhs$F2teOMq.D6^pR,A09/dVH,?GI!.[0PNdp&2BYk7N:@hS9`\-l%cXH5#X.REB]S(S6#CJjY[%X92Y_+U^*il@,Rb,q9f4kO^%D?ds$>rj?hY5KEaa't=g3]&k#6Sj0:6$><Kcm6c>'1<YI$/-2r@hmdj)40T$T*Jmf=n!&E>opj=DMG=U.n]@0KlUb4l9RCpANgs@%nfAGG=5On[MiCC?pJ0=nP2oRXTXoXIGlYk'mn1NR(Q8\;@"2GRmrU"[I8O$@duPSc1cme%7Hh&m;LZKt48nDO\otA#Nisg2h"gM'%Y'?rN%D'ZXb@EiVU.WON,WLC*i7')m^d2H^73Xrk<m0+QF(YllR[usTmdc4@Z.=)<J1"ZCCZ@JM_@(6u'&BLB;:$-_8pXP``@XZg%f?#@$f6UDd%@0Vm7VS2..^_iZ2_K2kN+Mm8NlF\+hR%@U`O0I'Ur`tae4=^GZjTD0bK:H0C`g1+n1E(0c&M%"$<J+4ol97V,-HE@%Y3#KPpAXdMp+pPWpW$(MIt*.gLX@Ip3X:#Gpk$=!<RWV@G?N7M:8J>WciogkEY#X5c:>:AOer=in0,V;F`l7:<^lFH"BU2jV^*Cm%d[6;4;0Hk2l,%Z2H.K#5#C=2c?`2?Sf2+6e5)?Q@0n<)5+p4?E_+_*FGr=[.C"As$W^ipT*GL6:)S]e$7.WC%Ro]l+B*mJc#U60l%>QW.bI,19#(+7LS-0357Q%7)Y/j)uKkoCionN0cF!ZcQZcJS0%BU/'-O!)_)IE+%[1Jn\>m`dGD</A1*Ep#;Q:hGt.VPjt^6ZJDh%NbLCF66/44`CmG8)%BL;UHh,p1nP(3'%Pq-h@-_]Kuhc"40Me=;Cd`2R20q@GpM2s'np=%N'jEocEtB76hY#/j2nRpo=9qbN<)eZ%@/db],-Q^U3Q2u$fc6,e;+>l4Ug^0&1!r(cM>Qoc_`t$b9d,`MIm]l[kR-27bqP&TLeNf<o84hBZ`4C3<(EC`Ugg6)0aY83=UD9g%iN+(D>Z1j)hIWEAK!0MWbi0<\YGIfKXQGVg-8.JY)<upQkR?X]@1qcFZP)n3B/lrc<9r"9%C9V%;%;CMbqP&TLqFXHk8!G?_eIoK%[&>4o:cq1kMK,Si]$:5U`pPQ2:,/YVh`3.2_:Q@<Ar9O2_s5Mrk)dgLLcgSNdQ:Xdq,],'BH7nIC\iLR0:m[0;!lT>*9L`oaYe@S%2aK"+1M0s:j#'FWAlAe)%=VVY/\3@Sd`51'-0?<6o:<`N8^NNM-TNM,[n\#ICdKjFhe%QgAh]7q=E<p&P,94&W2U2h!;Dk%#$#B2%VLkDBbTd^5C@H@aL09a/j&M<ZC+9Z`XYaYO=d5'*A$$m`j$6+q'l$:0R>H7=S?3s]M8fOn2ojX5BdP.2L=CatlA.Q\1=BAQ`B(\i%M;BSU=EjBdkT)t].5tb81XQrMh4%ggW=Vd=;Ud6`R8mO[U,p_mV=8Pp'pDIPP[`J4Y8$86\>aGlit?$ci9T5.ZT.iP@F^Xp.fl&<%??i2"d^r0*kO^5NJYnfgi$R+uWf%HWaOoNg#Xg7hU[O*+7?+[mI&l\JjqREU`beCH*GU=#n(@(J`hA\SpA6O"*rGo)k/quQ3n"r(%'^+,Hf/-RHlH8AAJB[;74GtuC>M">]0[\Wb^H]f*IX_J4qL+_YSr'VXhcJ#G4_)71m_!-<b,jmF'\/?./;9_FXI+ZE@TFu=AF/9f%*^PI<%eJU7d1O%IRpd(HO-s,+H-IXI3/u[[U,p`8Y;N+a&o*lA'&Gn_2<5V&:da4_q2(uN25F^\]*U?j](:g.SDc;:j,(oT0AK*S%rOu\[BO5FA\0VaarK:X)%mrGk);l4lfVL*\=0qPrH)Wh^DIm#$Olj+GqhBsi5%g]XeRQ?)oDE[E%td!l(uQ+sYtnFFYGK9gT0kB'%[dZ[rUc24\kgV@3>"d(1YQUfH>'lbMJ<_RTjI!U8RiiJPO52n0nJY'EBcO1YjP]2IhU>Z>Hc%,E:bT]!iRlu(I/$r\Nt;CfHWn"-%`@T.E.qEeceV;dV@lBpW%/$K-mHtGD5gpU_qa%Z4pTX!rmdB&2iC%4,;k.>nY!cU@dbS\8C8Go#e"VjZ2bLYV0dEF%a8?#u2J9G^%OsK82`0899;bDj7-PTn'&QJIk_)PJ*Bu/+g]#AuLR`[<]=_#a.S$c=rWSl(a0on_q3J+G]1X)R=)R#l?Tr-7gbUP8.;&SWS@s9S^%"IW_C5DVXM5MV%*3jkBO`U9<0Mlt&LR,*"P.<bG*X0M#,GCQ^=r=PLh'D'/<EF4(iiI:(Z@6c1Y".[XVHZH"R)OB5d"1$VR8/#R^%>`D^-DR)_SR5Dei1#3Fd\lpMCnKuS2c3#in(uW=>VGSh*'6:KW*G\2(h[t..0Y67/F.C)^7kn^_@L:]F<_Wo7b)d2/4qGf[F$s[8%Asc:N$B^[l2Ql/"eRW!B(2]uem^MYaoguFkjh$)$l^0FYo\-9?U?fmLqd/HZ@4RbZ;8CH5#\IA7&:$ETj*nZSPZh5J9!o!/h;\Uh%Su;/$+:<837Pjjf]0icMoN?:Q,j7Z58=b48eGrZ'$>)M4+`_VAT;f9'"Ok/?Bb:T-lVebSXsl(E6ua!T$ofR/BkN'9m`5@"B:23m%]'npuA;?O["!p_&&h3+moP.2(C",JU-j."c:J[6k&;AfWomJl*X.Gg:]^PH;T)qTAIdToR#uF2e6B*A!"sZs*/;k^6H"lP@R0HNA%-VOU<9[kp3FS"@dPZ@lVNGe/Y+c/uSS:I!(1_bMD8@%Hq+)@$R@f*D[`*^F]FLZ,PEj`HeGYQ%4"hR@5A+cpb6l3$`bI)#2q%SYa%2C2,sD+6**YY&b?!Yo0qASU%O-<(XtWLTEICM().O*_O.A)"m`PBq6Fb1,0[R*$#;TY<&MK;MEff%6c30\&uE%aQ$Ag,oQQ71*Ah%9d'sA8A'I,T?*_)7?8Ec%8+:s(7Y\AJ7C[5dPTPg8pU%ifD?dJ:J`G<HXf<nMD]c0o#Ct\"LYaOL+@Ln8a@YbL=@?'C\1JFl<&A;%iH]=n;P,E)fYe)l_9L6Wd]M>p#,9_4'K?jc.'^q%VFaaC-0C:MQKB+!cTV&ZE$DPs'.K"I(d%&[q&YQ:a?^`HZ:%,0ZVu<0OUSJ4%(+)`[8Y1BZpdC<14\'=[+AMe.`de8Y_sKC+i.SKlOhq\[6Ot5E_LgRMLXT0FNp?sBA!ugQcT\bR;W*D+"u#_JO9RYiGV)j'j!.&b%4;t2>6o?)!Q5HNjU-!G<pt32DUMd7(d+'b:A)oDLJU'bk?i]#,lDMUu#8REoe%HW@539JRLTt+3dj:S:)MTeLAm$sactWkbKIS66%MbHoJV</Z^lJ,kbZ_<aH$o"(V8V"E`_ViC$C*[7e,=g79,.f-o&ZLkJCpM?j.Q-si-;s;+fK]S*'Kk3@5n[Y8Hl+u6:lRq\H=Vl$%;!9>W;h(2>EO0Y<KX0B,6LXM/V_RTq8I9k8X1>*&J%:cMgh[lN3^S/@BU'kn_O`5[Z'4brN)(F8E-JT\Fud@Th^1_kSSR1R2Ec!r%^jb]G+]oktj)Ac#2EMOZPjH"m.0MJ,VHD?@`$,N;,Ut&PZebTqk'D;AkW;AmQ2"r,"&,LU&ttCH$2*khLSJZELrlLsP,JXtG*fTZ%RSOoFE)Y7sPng9A2t[bJhj2sB-:Nq/r7mc.n,sm=/1a0)lq)`tTdEF;aJ)1bW!>b_</9-0!!D$;*T;H[=Jdgc`jHd21/C^nrd/-?%)tg^),:qai+#q,#:l\?icJ[Y-49D8qMGI'$psa&jXh1:c3GiJjS2Z5b0c@ir`;i&@'U!P'YTe14A1+;[,ERZ',`<k2=fgRF.UG.E%3hAqKR9?!:$l1G:dNo)e]U+nh#iQFcT#1R%F)ME%N`M6,/h95#7fj*]=k[8h-o8i:"srsjR=<>(H3u@+W=%\8,__1T&M.I,*$:nV%c<t+DAqi-f\2OH.q6\TNC.@h:jD]L>=k,tWI:h]Z_b57DlJMoPG5C&4BMV]aO1<X)":KKqM[tTl.f!'qb03[/&%=\,p=)m"?*.P+%4C%0f'm=,-c4"@Tn.M?8$O*"c>_Vf5'Pt3/<GNIT].+RZE#>8@KgAsr#fd[nBH:TF0P%FDa.`f-(/'Lk[tZ&c5F3[7d-_89>THIj%it:]J8W/W!3BU)F!;X,`6hmZ)$s2q;Ym62</P7.A3`'%iiek,m,20&mM^lBppf@"1IBTX]'P[8]Dh^f%b&IS<WioUrKbcgLo]YB_%4fudB>Y[M'8>XPb[IPf7H+U6OU1<hS.@'p>,!hWFgm]I>qh3=roZ=Fp;`n_%CiMpr1\u@,NP*E5E/`#$jbc?X1=I'jY&cA[-?ObR%%%qZ8=(9Q%7h:(:c(L1e:A?+i`t?!)lK,<L%j?jr3>Ob+Z:Hi1.^k3r-lE02]EV6!1+,r-(e!/@14\4A[kS!fl:L?0rS3l.NRNT.%/gr^EilH]`RhAg=74>K6;,sDE1Pg4Q3%Fn+G<4LG&Zf8N\+N<EZ.T5u*k^9t6'\@WQ)$i=9c\4%@aQAi<.bfZWG"u"66)UMNS]Z*%"Hc^4S/[9@U]`pVArm-tX]5jk9V_k;2J6QWMEiLNeD*$Rh!pP@d&:@2H/D!?TgMQ[RmRsb$\7XoS#K,?/1l+X2hMGP43@UBB_!Fa%plI,DB?9(DQ:2Go/Q-5tS-!4C6XW&$HnJo0(^ftFT[0k50m]_(a2eO(-89stgm]ITl5k<=[a&4Sptdt;q0NDN;$Ujr)\K^SJIIKq%17ehcj\4%2/`8">j`!2ERgs2<cOB^3iSF^qI__PHcBAJn*$:7Ze=t1r/U2LH&'n0pJk)(]l;H]=,5n;e$D'l484cN'+/;o[?=HbU%6(*/VRj)h!heD^>pJ,&iG^P0[3WAmn$-qbp-11n$?c]K^""6F4[!TsE=cJ?&P9.u3_r7tDel%Da1UP9A]a6ssLjj`1\9B'N_d8s*%@n8p3JtN*4's<F%K*1Co%'&s[]Wrdi^0\]8=_(C*@i:jeQO,KXRop0`d^9q1=);A,USh$Q=YsSd!m@;EL!%=u1kcs"EX$*TJZ^KU%,#OhU's=;7)"-XKK3IW(@h4%Vc(IO=Y]06uV5kDl6u6&fLjDnY8a.p#,pU3c--14JrA/b8/0+p$1nJ`DIOS9r7@=G(`.)\,'KUg<%j5Wf,%chSV5XJ;*F(RCaLR5N!#3Wj//pN,eZiOF4Y)@f#oq6(/m(u%(LKoUJY;ES!OeW(MpL[7]*s6MuberL1JFO5.6m*k-8QJD.%<9F)Dah<ji%f/VTT*K"[g3HE0cKist^^-m\AE5cRM#et_159%]>@0?Zbd/5m?n$VZU,F=%/<WP:j"pqoT4Ipf(#orPm8?8N4u\"N%>#IX7L?%h_qnfZEDtiBJ2lm7T$IRI>^,.%AC(!he7Z'u:>'18,8U'S3UC"K<G:nKi7C`O[Kg?A<-j[t5AlU$P$/Y*p@>-Io&]%#_%mKA*e8Pj#A/kf+_/Z4_R*^uu#*HoM5&6U&PGX=7S#HrS03bo(":pr0\[P5,In(nIo@n]9J7<^VW3seN]1iOUAe<+?Gp]:9bcp"fH%X&N=L>qZ8+pmd&kaG(96Jl8FKm71\BK`/aM'^Lp3Pj)<J*U:tF;QCe*(4E!iEQ/r[nuT+6pe$r^%1LfeE9"8K>N,!N&;l&pUKQsl%diSGCS&6_AFH3:Om[C]8T[]u1U8X)/+.W6!@;!&Y9pT41bUU0GC"0ZC'neoH'PUTniQ8pj]fGH?;c8IT`SG+n3$bml,#)$kHF)C&%aBCegN/O;2.qUK5AGrY@IV'g?#mDJK>AI8V@;<X9]fAd$/7n+)^Ma$-.^?;#Kk\q)Wb"K<T\t*<LE4n%-!l9,/%0W[,)\'Ph^Q[<%?+!9pj>#_Y)0!La:6XbY1u&:bK"s-"MTK[TjB8jPil7r.*d$?3g9;degFAM'n>J\i0!`QEU;>]iQm'^h?[2;&mG8i6l%Cmf@rZ^[%3t=i!>,7"t82"nDCtE7Q1mpPY3KNNI^#^i3GIo3>3J4<[D":8_-SP4kLg3<4,1Y@@Z>6_"@Q$_a3J*li[-'5GEj-!p`uhHNq^Eo1%`OTJCYgNb']">cY\VHbZ/_WP>Al&0`+J'>`QB["D#2h9MMqFBu+c2XYW2qh,c)k-I6B,L)odN_]#s"DQ%=mmHMFB]QM'7W]<Tk-j%b]6-:Qh[gf`$S!;W/60cc=aapD[ho#>%E?D/m$IFce[u3]nM@ojup')(T'@j]/PN8A^ZCgim+^9(6i"18/0U:k(=""glbo!/!_L0%:8ssmalmrS8JX^FgurSF_NTV]HZN<L5aeK&Y.D0lJCNk?1f5.T]k@X$gi-Qk.ONb%=FL?TUR]TmZ*I;]K#%6/=]MK^*0VS%.9>fp%:ke,eUV"^?;A,3sC#D;le^=6cEPdt=_Cak`p<Z+B"oEhf,D5)c/m,8Tp8S*]!.2G<7H+-h7UepJq)nrt0!:W(XMGDLYW,fq;&]sG%8>7FDg*"9JgabU[FHJF3o-G@MC5&oU''GgCO1Q2q.#-5J^0:&4BZHnSqn"eB2+g&%e/*>bghBT"V1B"O<(ECtR?HMZL\l1@WATWM%:KUFMRPoP5#@6:r2%Q)pH6%[p<n`"KWuQt:n9/`)*Ko'>kfD/B+RhAtb,gVW.B4W;I,b=cHU'NF*@.1,X>W[iL:"t*o4C5hgj!jE%oubRW/i7_E"eS[`aqEh#HgnuSHqNBqRqn_.U9BpUre=oIn<FJ=9kTjcYV:'#06m"Sih!I8hB[k"'EdGbZT9:o+][[O*7fA3c'\@e%YH'mG8usRa@9W;cl7p<W9(^hpSPEt<&u>b8.8t1E*#LnB!CR-N5R9G!>IB&[SnJO??h`]e+sX0WD/n1O*J^FKFlA2"8FL4!qpjo,%*:b[3-8Pn2Fp<#Ec5aWkB4U$l*Uha)Dj;-9*;nW^@5&Qdhi0>?'`D#nX#)<43YnTkO&TJVos2le)C/72Y^G\g!R!S]gNYA#!@S)n%NG;B.RQC>W2[@I;Wq)AgHki3DeTfU+>%k)&lQs83L%8O#bHO9Q"bl&(-]D!`Mep;5_@3(;-n21@&SV[$$aE!<%99!)K<MAC@Z<lo%/7bH2\k$Z!CmXd3]#4;4G`q_Xj%@U0%c"!PRpBs2-b+)TBi2"jf)!U$8@J+m0tnZG9W:L2WL?&.b,jmF'_RT'=A?-NCN3lCa"Y'J%d39QToKt6P^d^4?Rfi+5_;&a*H""k3hn;$DW`!?lMa*]UZ)H1;=I>gH;N:.(_>!q.f$&q61Nl[(#4F3*CHdTSfeN8?PS]lb%4lYm%F)QrWUml>=4&G]d5P1_kn/78*fj'*i$@Z=@Mi0:0dCY@9ZrCk+hma4I_7Cg]*uSt4G38(#_[&\]\^4J"O\$/TGAdu7\0AeGE;0:P%SKRG"Scklj-AI?mFelQG)2E-GU312\KDS]'?>,!p,Tj[V(16Wc2M+1*HtUO%7]:m[O<j/5**-U/KaHW72#@phr(0k"<>VO2O&R2s%qlprb,Lr`'4/u<iY&O1RTB1q`itg7a$JELT&W-XrVmFMR;\&fpc!f-lR@2dgYF.V79!+,-.I&/.(Zdc(l^%1^L<2Op/4+ql/OP];%N,\8-b)0"0QlDSr?'oBrGAduWFKI9l@rZ^[3t4faY"08WU#qQI>+dg4A\>;:Yg+I!l]NqT[3d,C;0/lG"bG@U=nTjH#lB8#.Ajj$%@Hr43-O;gE/5`C374q8l5#P[c\V=1,>pl[R%/Z\U50K3u`qtt@T4q(E748MclY6SJ4YmtmrpJ$>-_CphF=mJEo;>Hb<F(ud5#TX`%I.0jMH2R(oE>WLbM,t[!(^-ZU]^4tb.sf#Og+Yij:dR%?ZnS?7n(o%MD3Tk`T!b!b#m-`_W6D7p9Mln2^,QM;]hVlG@$o17SgP7l%)4piGqsV<i2S7hBLR4?9[PY%r0\,+MhAfS,&iZ\rphT"fUJe..@>apF@=I(0!FGSGS>=lCcG'ik[=u^+D?ucV?c[s6LuR?OC0!JQ%)8cC@c!_DqFHm1#^s;o^JZ$X:.^cS'Kk\q)W[h(pnE*!Xi.a,gFl:Cd(ff4>TF*p:<)'@Dc7)bq+P)t&OKKJVY`f^'&RC=,bM6f.%C/lKU<(EB=B>GU'[ILm+`+/WtJ"q3J8mMa.A7=$O`HU72<EaWFn9/^[]D/k79[K9QrWIeu;+tTN(S7Rb'OP,9m8euLLB!ofk+m;5%s$>gAVnQFKM?1&_Z`4C3%K>e?@9bu';;OrbV[.[/K5t!o,`:l+UO\oEI__:gddPjt48fNV<Lo4OP1Itrmk^XC"E@6jF]LXZ3@*kX%fe<kAQs_mcItGJ]&e^I;/okQ-oo\N3FW)MlY.bp"crD/W%^QKf*$0l'FeKun"]g\A6*)l+6Vabt't\XG?C43`_4Mk.:SKVF\hHR$%Uq0M(K?Jb@KsM7^GacEd'[&M8,;(YO12PtcTcc$`3i`sO;XejJ%N@S!5(8>XFOoYN&GVauAQF4fMX!b(726mY6+LKB@b:^>.*&MU%bPEH^J[':3QctU%,8:<Y;J/uGVAfBgS&5k=X2]8DkYDcbS4$phf>86pdI&i=P6^!$]9@!I&s$JT3CgnQ`&mSZAA\[AJ^pO%lB01"%p31EbK,::jXNK$.InflE<+9F$$e(i2<*.AhnCCr1^D6),1dt/E(.-'f_iUh#=+l0uA?AldckDNCipGSBQ6^Vs3c]<i#e6(kbc39h%;&sB=S-/Fe70i@GIAe[#PY:p*,&lp[,*+8:`-:Un-7q&gp2t9`3b7h$jgh+h97:M:@ac-^*drUlP>bhtMj7^kZ'+3=0Ln_!&=-Rp%:","8`'>d"XNJCZJj9+3(m@UO1A)RaFh:ai<+^8*9Mln3`YX?HakjE"F;U@'3HI%`'CT&d6,C$oN>A,t"XQaHlB01"/I*:c25;D-%(3`r0\tI!a!b\5r*GOZ<.$?_0i%SEh5:ROQ;[$`;P,83Rnnth>k5uh48s*kRcH'OPY2XXB0@Vm,GnRpjg#E,LQ!'B+.I&/.SQ"F%%<6fF":-L2%>JcU+$b/uE43?X3o.BS"0:Z$GQr<EtDhb[<B;IB"4fm>/+RhCJb,kHV'_RT'^?5SWXj`,jJe"iOra`8Hg]471!3F<e%)b(qW^?aj]b/.,0^O(%S+m5.HSVt83r+T,FFY6?b+0((0*ck_kEYI#4Kmk"QV`l-P!T4D1+M5]?bC*4nJo[\jog!%QPoHJ.CL"Lh%dBU2Ce=?ah<Yi.u/a>k_Df.k!:ft&54)<-3=it=JfZPcH_-`]^eLI2BaFIfi(!E=SLh_q;"9Ha[PZa9m[&>4oSP-X.-pNCJ0RbDP%k$][E'Y^CNC^8W5nu*NrJW77I8deQ)rpJ%88p=9p#i=#o]+Y<2-:+&"O$lhcBg1cmmfu&ZX$Gi9:o"_Wok0P8RN@'!^6<IN,u><E%j5(J0\Um]`=Ie;sn0*0GU/6b(:n4j&fG'HL*'k]PD]'gS'!5*loo(71;pACNhC<p%hJ@M60gt=ZK;;=!Sh'ZcHHY;V)[fe^U+R)%%Rq!^kF98@j*%&E'=DNIjUW>*^nie%N5i`_o6+&1TA28i:h4);C2aPH*/H-.PB2PX.M+igk;VemT)fbC)OMght(X1$C!m5m[_TFF8%aYGLO;,Bo(<bYu7_;DpdXOF._7*"<T0R"G">4kE#eWFHMEeFfg3D16U3Od(--!3.MB0,M8Ta1h<$!aUT_Gl-%HZN<LZW)eXii\b4%%8*bJ8/0UJk*@:UlJ;mYbPY5oT`Z&@o.T4d:;,lb$P3E<6+-!?W!@88k-.HVQ&_dpm[C]8TZ#"4(8aM@BeEZ6%5boGNDD[&BR2ME%b]R+BknXQ/;55`L7DVQ#XC.Q2-:?GC]fD$iCcSB$phT0@U/J$)R214HR^_-Ep99n$GR6oqj]@gMGbGY0e\p@YF>PRB.TNNt+khQ1%pmbg#f#JB1`Eb9D&sF6Aa:ktD@U=KdW(_OU[W=p&AP;Of!bFc-6Q8<>#0N`R<>MGEr8!j[$;X\O;lS0:+RhCJb,imB.I*\1I!<cU%I+-bW]6ooGJq>&4kQNlO&VQmO4D@i5@;<X9]fE05Q_dBP7Xp$*k9MObZH.`6d7:3p</%oJ`*p9^n^8`1UMP1a8.g`2P,VWm1GTiB%904+?=#FP=2>Si7Pf0:OWtLg9IAFGOD.YRiK#m9f]T=#;9"p652`h6DI#H,"m"&`?r7mbc12EX)V9XOIc2MB-B%$fS$[tA$.2bp)%PB"r%+-Zg\o>G0Xgmr*2;?koT>#^usd$358]fAVq-'bCXi2]iMjU5;"3>\,?qANgOK?fCHG*4:iJ[4'Ake(%(4K(Zm4=nrJP>`ij%45[2b7XUEW&IBZ<m`f1.H[00P-+FTg4si"`OX^s7.#mj7WT[aE2nB\RQ7r&IQ8E^SFM`V+M_mdL##=5ge^)=4M"nS@LLo0)>*qp=%rWId8Za1COCfM\.U5r848TVMFRP6;9"Pk5d?^A,9-MkhRpGRP5?BbrEC1!A%i:#MB-@N!OPnO%\@fE_U<NEP^7=D!.[/*U!T.V9c%X9Y).VPeE8mT&l7qIsai;[NHkc!_N+[8\+CH.@ZbP&,7n9Mln3Q?>]([:0p;-+W7sr`&g)%oM7+-I^%(SeeupS&7)2/nm9>nqo(N%,0@ul#g]6)'Gme[<O#pMWN9)T27Q?O.^NTpQfQ150Ic!=/#Jbham1+"::3Q&<[BLQqFGam%-UXuAu`7t4H2Qs2Kr"<=.4mk'(*Nk%]fAbRAKn<)8Y/t$>*,aa>DT"7dX4XkFIGuU)*-1f1DHq:P'l\l8<VA;j9&<erpJ$>)QPQ;4\[]>qWfljR2TXoqWP="E^.UD<m5$d%@YQoSH@BR+/[puBfL2SPr8!j[1tHR3IIQE"?SU<')IZhAOm6b(!303VNV1^tnoXers.*(&+ig3FA5^@H<_QM#0e]RlVcoiNWuRNC%IAFGG(3HRGeWHrEE[bY$$b,P!on]><)'*1G9RH8QD[t5uKurtC5He7b197i;7=D!.O=]Tp$YH[;OJOSd[:BnU-!d-\kQ=ZlmdA>.%)QGK:3AndZ\qc5W>*LG8_cKb&]5-S$ZXFWLX"fU+Cec'?aRWD:Qs0!'D[t5uHd'b"c\lu>._USSe7<i=8^p81o2:D`-F"=lYp=XG%D5fq,1ZnN!Lm=n_?M+or7qM7;@O5bdR8j_jX$0G;XIWGCJskmR($4]TVjpLZe1%G.XFY'rrpJ$>)QPPdHDYKfT9H4tW\$nA+/qH"%WE7>t=I_Nb."!_Lc$E%(n.=^*Os`KgVMN5n69Z/L?=sd/:?,EA,PZia+mi1hR7bFL_CHlXi9F738J1H^JfB]je:PG^F-oEH9O:Aa%W_rQH'b[$8,>="Z;Os0.dkHb]QRSo*ZnJh"g!;[ZA#M2G,$smR8k(+qe:cQ)@PXu(M&(60\Oi(L1cOap=`_!="66$=9T!<)l54;E%g4R.eF-st9@O>-*??NZD"1DqP;q+=;&#o,iC;DIP*ck6=/P[YC-"ch7(T&2Mh4);=ee0dDqX^_6b\s@JRA)lCI4_k)@2A/H1K-?#%g(U3JCJX^`,#_c^6&00U4k-(cc`96>XtqrX'_S0bS<oWG__fr7_TW$CUE*tW+Gur=,85;9nX>NcnI(Cm;.!)'7V#O[ngrKcEEd#b%$o>jKbT$UeS2l*Jk*Z=-2)=Pl-graK22.G#oB0,?0QZ1%-r\VcWfORY<6Sh=0h:?:<1XXiaRM8D9R3T?*N$*-R$lKs=5@B#1H!;h%oqCYj&EaN3ZWL^3$#FVL!2>kD%WJ3G;d4QnLM<hQbT3'8YBm0D9oUhYqFGa8jphgK=A'!B#Is:kQogtC+6Hr0&Xa@'WfPNs)j@88%QFR*Ub#IQF[-/ab\rOn3Y'/9N<L5^9(#Jo-CG*6[C,[o!7hMq-1&(WO;m&$.??;P+SLIF-W/VMWr?%rih4nGu4m&][]:Vcc9:0!5%,qhqPpq&J?BriW)#adi[\]9)1C6U14,LtC$Dd\sO)Cs$P/Fs&W6n$GU?&7doa?*'_mBN`nIpR5u<_\Jb7<S63dOZ9_1b5GseeBo>%iN5p'd;hV3%o$G0`/@Yi@s*\5Jj1VdUJ`U@,>="Z;QY.oS8,`EV5d24:mH5lnZ&YHYB"+dQk](j("6:XSlU^I]]p-9SZ,J`W/jn"%b8i.O9_D:lf"0YQJg`sGYBaR!b8hmaBriWCAbG4d0@d)%;5U:Q<*sY%J.[_2N:R8HM":hY`Tk+e^f'4*JKPk<MmYD=nN+uUD]nR#%bI,V7[(O['.&ITb'U)G.ep2mo`d*2_6mb@8g*:e<b2fr]o*-+u>+$:;>4dsB]$;6CAu_2d'%l3V6/+b-Y?)uI`/D?=].ZR9RQ,64%QKlu,-rEr6RZFlEoZNb,F,P0RX)$PE9$HQP02-Yn3t9Y@9?b?>c`:rgmPHfD'_RURCRmC\b[N`q]KnX1H%X]-]KrS+;dJPq%+A<_%S2X8o?M,3!%8;a:7=D,GVfgi]0o`U00f-4QSMt4pbj)<#-:PT4*kQi3np6UI"-#pT9T:_XqFGa7mTC:>p5)d&<FsM"4Y,;[EmF%=%MG/nPeQ990A5&jJ0DDP!.^Q,_;q+=;O*0kU0iQofg]=Xu\H@'lEN[K3?C::EG@6fX>%0(crk.M3k711F1.?VaqOb7cr-h;"pU:%j%oC:][Ndq*&OWRpodf0"JmDrU+_k#8[e=5lX?YHY5E>a/1l*fgJQKC-;OZI;X;%UP9EP:=;e+et_]L2GgB>GB&O]eHo_WJX-KmP']%J?i:nEu50'N<=^/'Q=:Z5&<3i@Lg@<D"(Tt#\rj(=%5$$brl(UYgj&/!4KZ'Q:MS>/!VHA337i\!6eZQ6<JgG]==DVJ7Su@Tg9L!%.pDCdO-Kdb`GQ]7bekOZcurS?04&)jP$Q$1BCmA&=GdlSJq>qg7hMqg`oE7(K0X5-V5N>u;&h@Z^XM_h8$ThM#50mi&)jrK'd(S1%'=\4iRlKnVdVFs&s7eDF@Fucti^[[cLlNE7OCrr]+-FM$n2Yn^Ng"2I)>978k=3#W9_=/PMW7R!c1Tr?A$iTX,`_hZTD-W!DKqO*%FaP[(s,JmNoY`)**p/u#5D^j;*^.kNnNfD=$pMC+nY%9q\<FZqQ99#,i5&!B$BGQX9gd+jkq&RlA8%*<Vd[@G1$H*k_;d<eKFgl<%B75R;WYR^o^X4th%nF:+`T`4[K^pMec8J8$6A>VS%V_^[2%t"n2#Y9$=hfk"]J*EB"r<$f4s;;S<s0:3STR7+X#Hh+2Q&ckKacFM%AoWP^*WSQf?phDTl\&di!(5HkdGHH"!,k>$]Qfo[7bV<m"GJg@*0<:^/9;pfSN%Ws;.%FR$uh)<elRkk#125Q8BkQO>^s`.&bX[)%NWBpQ1K*6MZm1S3>lO\AcdPa^rq^A7\_c(IS;Amm*V11SXBlnE:W;0!XOFRn_LQV-noP/,4J$+Bkm(LL-EKC@QhfY(Y]eF5Do*!0%CUt^ThQuI.*,TXbmbe]Op5W6\<S+mD%Sfnjlj0@"\-lR_-3u9Q'9nQs.^sP6EaFM*Fq(%*FMskEP\;G#''BDbMq,'>DU49bFL9?r%17]t@jh38Wi>FRAfCBZQGlC%?Z<HoDS?C^4(q9Pf'*9!.)<m(([@GK`Kp\Pp*H`D-]N2iN^Blo/&E#%>#=\V9eK=.Z+,%JB(^W7f%$[K(d7++j+)!tT=n+igg<U42BWA;7*gE1[!&`K5G%slJUIh>*p2*/q;i*5FLU/.=h!u3&oSfRf-T'.K2j;MAnbqG5+,1tujO^5W9%bDdC5$T.2[M&Mju4<)I]#DkE9HJbn1Gk(*J\U)1g\IO#[,!1N\<<?',XDt/F"5ca"Pr@-c.&]`iJhI9Q.-l-]gI"+R49Ehe-bULZ%c:pF]Mb9b2O<*i]0Ka*G*T"b'Im-t8Q7T^-'9Kc>o*aeJIYf*eIJig]p;b3c?d?jh*Undmhfk=F:_*fErIYJHD*+EbR<oEWHs)7`%*A,Bh>Lu`[`K6r!kPi)/47`(&Sg/$g+?`6CL-bZrSPN8M4)jY%WjTD+J0h1"CNJBq[;b9B".lkJ^@-SBMO9)VS8M5QC\PZ3B%MK2%m2Vr#..[%&pQ>@%e9iMjo==Zf)VI\$VTBFX+0_MHS(\D:0fX8m5@ChBWVsX"Ei8U5io@50gQ-g/m75b@=k\q>`N6EgmEfHtgQ0qX%;quiKp!pGl9n'\+K(/N74UCDtn_anQVV$IL?-6gE5e'I+4\1]1=*p$\J!^/08CM'-')@p,%i)5f#^6O-JE3O-aUd9VBHNnlLCRT_%^'W`c,AFX7[.Injg4*f3Xo4"u78$GUPkH22F2e]"T1dLKHB?0+4ifQFa>Z9'2a,63r#XqK4=MZL.@$:.+FM#G#3=8UiKO;*oH,h!%XZ_K+_V0ecCEq9(,.'h89;p9p1^1B$U$KJ#+XOK==kaF#7'p+$7O5*qaKCW3,#'=M4$l/0ksu_ZW7$baXr*rTBiGU60@Ebb7B4RZ%CF`l-"#hI4nqX^kWS.SJ2c?TkQ<'eHlQiS<c5Kk&P0]s4afYY9QSgBC^@>/4W<_+agm8dea-h?n6-=>(('JM/&E5d/d!YK<FC:M7%VT(t28Ei6+E@=$ODEVaD^-\9LUA%*`r@$"!+*h5JO!OD.[N@IudX1&U92/b42%C/_54Am6L\2]n1V)A;(\tT5*cc"0lVXk4HIVn%%D+@G)DEDm&dTtReFG62*.EQ4ule&&UiiWBp#6'Ljmsm"5aTAZf\90t-&/fC::s@@0*8InlbAlk]PdDF[rBFQ5d<E:?_*(<SiKa`:%/41MRVP@JO:iOl\m=#6u*O'9j^?8ATNf5k:2;[r'>&l"EJW.clC-)-fL.t2&ni(8D9&lB\dW.k\TcJo1&DD(;nYT"c[h-u/khQAU%3g-j9g2q#OTP[2&g(%s>[.Vc]5[+c$R9Q,?b$9)$ejGP.CHVgrVY0_]oltl5H@41fI+*E>#AZK4VRkh(!@POU9uSip*I;:_Y2bTV%bhA)[GtLhAm/XBZd(`N:dBuW0c@ZH7m5qiGe?5Qe%+]M7Ts1C]VMqA7i#,,N3-<`DRuV[Vh%FTeRRi^H6]*ql3Ek#m7!]=o!:`G1%ElaCSCcQ/X$[!F(VYm:HW)A1;^O`G\Z(9g5UM>RZ/Orr^IrO5\%>Rspgi-f7j!4L,4C.T`INqFD,X$q=A$Ert=k0XFa3Jm7\G=cg%\efZ'GV=F<]gk)P!RuL]e(kYq%cl!k/D>\P&b0K#0=VJE+2<6"a-Vk`prVQ_fSN]o5PX"0`3>J;`<]cYi8V!aqRJQ2E4sqR]tM1/%])?HW*oHhfj+I*8GJF0QPlC[T^O5SHmYL#]Q_2$ArJOH9rp9/VFS*s.YCH3/a05MS*2gihYJ0euo0:=d?Z3hmIsgbUf&)psr(4&@%rZb(bp/?\Ih[_)i:>m_jl:rCBZB_3<1u*Loaj[_Ar:D4ISp=*ogaj';4dl<(J%ba>Vdf^V2?*KhcZ($@W)IHJh=0Lhd+gt2@I(6r%U<:t&hJE32^SAa)&I]%s9D`)5gFHskiImSTkE!8Z*I[LKUK;q+]N5d>=(;!#Z2AS`s.7/fK_3fE_X4n+Yb(94IVS(RA"#FWgb_B:%V!WCEmQBo^8%TZRIc/P#=8'&cP[L1'pfY\PMeBc?kC2+]pgqA:&,=3]"NL?13fLPuKj>G_E@dJg`6E8[QLmU(\j7uE1Vr)`cDiKj%2>Erk72VeZFWF=`gbj/N6)iBLM5!%5^AQO-JEpu5S'oo6"\ealqqS9>5:u3oDgb*hL%ml\rI53\qK7raS(><jfCF`_KRQY&QH">O%ZFK&-qV^8u=-imYq>(l%I/_fogr&@<`,CgciQ\[4iSVKHrqLE@GJ=*Pp>HNGrV4DTrSdG404&J`]^t#EqUOoHs88YL]QsJOp8d)!%oRC1355Op#cbB2<Mq@tcrpoj7kHB@o`ocsSGJF.D90gKe`;H0MIdkgQg]%BGgE)X~>%AI9_PrivateDataEnd